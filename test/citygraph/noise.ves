var node0 = ::shadergraph::nodes::tex_coord::TexCoord()

_editor.add_node(node0, -1149.0076447763, -15.046917246399)

var node1 = ::citygraph::nodes::streets::Streets()
node1.query_param("num").value = 3
node1.query_param("seed").value = 1

_editor.add_node(node1, -8.7465973017613, -42.876295462212)

var node2 = ::citygraph::nodes::regular::Regular()

_editor.add_node(node2, -974.16680129641, -31.041171512986)

var node3 = ::blueprint::nodes::add::Add()

_editor.add_node(node3, -812.65752697889, -51.566868116894)

var node4 = ::blueprint::nodes::number2::Number2()

node4.value.set(0.69721138477325, 0.17498914897442)

_editor.add_node(node4, -1154.4656322553, 55.015304816165)

var node5 = ::citygraph::nodes::draw_map2d::DrawMap2d()

_editor.add_node(node5, 462.738271369, 66.46164228693)

var node6 = ::citygraph::nodes::parcels::Parcels()
node6.query_param("max_len").value = 0.11370551586151
node6.query_param("seed").value = 0

_editor.add_node(node6, 353.43196545991, -35.447443774499)

var node7 = ::citygraph::nodes::offset::Offset()
node7.query_param("distance").value = 0.0054058497771621

_editor.add_node(node7, 494.89487235322, -25.179406265909)

var node8 = ::citygraph::nodes::shape_l::ShapeL()
node8.query_param("front").value = 0.019170396029949
node8.query_param("left").value = 0.031392619013786

_editor.add_node(node8, 678.22086047522, -31.497258656369)

var node9 = ::citygraph::nodes::draw_geo2d::DrawGeo2d()
node9.query_param("faces").value = false

_editor.add_node(node9, 301.50611320377, 176.86966416363)

var node10 = ::blueprint::nodes::subgraph::Subgraph()
node10.load_from_file(_editor, "../../assets/blueprints/tools/gen_tensor_field.ves")

_editor.add_node(node10, -1226.9728889742, -817.69385108858)

var node11 = ::blueprint::nodes::subgraph::Subgraph()
node11.load_from_file(_editor, "../../assets/blueprints/tools/tensor_transform.ves")

_editor.add_node(node11, -973.55820276949, -808.5271637715)

var node12 = ::rendergraph::nodes::texture::Texture()
node12.query_param("unif_name").value = "u_tex"
node12.gamma_correction = false
node12.init_texture("../../assets/textures/ibfv/WhiteNoiseDithering.png")
node12.set_sampler("nearest_repeat")

_editor.add_node(node12, -1226.5729983348, -939.06231833633)

var node13 = ::blueprint::nodes::print::Print()

_editor.add_node(node13, -744.23830200788, -808.67387267646)

var node14 = ::noisegraph::nodes::perlin_noise::PerlinNoise()
node14.query_param("seed").value = 0.57322728633881

_editor.add_node(node14, -1752.59040063, -253.30518305838)

var node15 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node15, -1880.9920535225, -153.5431995873)

var node16 = ::blueprint::nodes::number::Number()

node16.value = 10

_editor.add_node(node16, -2236.0880865804, -138.46253843027)

var node17 = ::rendergraph::nodes::texture::Texture()
node17.query_param("unif_name").value = "perlin_perm2d_tex"
node17.gamma_correction = false
node17.init_texture("../../../tantien/assets/textures/noise/perlin_perm2d.png")

_editor.add_node(node17, -2250.2265750069, -364.21632275625)

var node18 = ::rendergraph::nodes::texture::Texture()
node18.query_param("unif_name").value = "perlin_grad2d_tex"
node18.gamma_correction = false
node18.init_texture("../../../tantien/assets/textures/noise/perlin_grad2d.png")

_editor.add_node(node18, -1969.3174840978, -364.21631859476)

var node19 = ::citygraph::nodes::rotate::Rotate()

_editor.add_node(node19, -955.16029469649, -298.90499621605)

var node20 = ::blueprint::nodes::number2::Number2()

node20.value.set(0.5537611246109, 0.40931668877602)

_editor.add_node(node20, -1151.8857818321, -141.7493484154)

var node21 = ::citygraph::nodes::regular::Regular()

_editor.add_node(node21, -970.9565165481, -119.79697842508)

var node22 = ::blueprint::nodes::number::Number()

node22.value = 0.5684814453125

_editor.add_node(node22, -1144.1633521537, -221.99586783215)

var node23 = ::blueprint::nodes::add::Add()

_editor.add_node(node23, -1456.5537025, -324.27270485352)

var node24 = ::blueprint::nodes::number::Number()

node24.value = 0

_editor.add_node(node24, -1622.292393125, -405.89488523438)

var node25 = ::blueprint::nodes::integer::Integer()

node25.value = 0

_editor.add_node(node25, -2244.6602050781, -267.91242248535)

var node26 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node26, -1970.9304326353, -246.62235499942)

var node27 = ::blueprint::nodes::number::Number()

node27.value = 1

_editor.add_node(node27, -2418.945078125, -188.89888092041)

var node28 = ::blueprint::nodes::number::Number()

node28.value = 0.78831517696381

_editor.add_node(node28, -1284.9483640744, -84.030019506488)

var node29 = ::blueprint::nodes::negate::Negate()

_editor.add_node(node29, -1152.3488259606, -70.964650957322)

Blueprint.connect(node28, "v", node29, "v")
Blueprint.connect(node16, "v", node26, "a")
Blueprint.connect(node25, "v", node26, "b")
Blueprint.connect(node0, "uv", node21, "st")
Blueprint.connect(node20, "v2", node21, "pos")
Blueprint.connect(node22, "v", node21, "angle")
Blueprint.connect(node0, "uv", node15, "a")
Blueprint.connect(node16, "v", node15, "b")
Blueprint.connect(node15, "v", node14, "p")
Blueprint.connect(node17, "tex", node14, "perlin_perm2d_tex")
Blueprint.connect(node18, "tex", node14, "perlin_grad2d_tex")
Blueprint.connect(node14, "ret", node23, "a")
Blueprint.connect(node24, "v", node23, "b")
Blueprint.connect(node0, "uv", node2, "st")
Blueprint.connect(node4, "v2", node2, "pos")
Blueprint.connect(node29, "v", node2, "angle")
Blueprint.connect(node2, "ret", node3, "a")
Blueprint.connect(node21, "ret", node3, "b")
Blueprint.connect(node3, "v", node19, "tensor")
Blueprint.connect(node23, "v", node19, "angle")
Blueprint.connect(node19, "ret", node10, "tensor")
Blueprint.connect(node12, "tex", node11, "base_texture")
Blueprint.connect(node10, "tensor_field", node11, "tensor_field")
Blueprint.connect(node10, "tensor_field", node1, "tensor")
Blueprint.connect(node1, "streets", node9, "objs")
Blueprint.connect(node1, "blocks", node6, "blocks")
Blueprint.connect(node6, "lots", node7, "lots")
Blueprint.connect(node7, "lots", node8, "lots")
