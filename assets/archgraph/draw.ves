var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "geos"
node0.var_type = "array"

_editor.add_node(node0, 475.80746742901, -99.7274483392)

var node1 = ::rendergraph::nodes::draw::Draw()

node1.set_prim_type("triangles")
node1.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node1.skip = false

_editor.add_node(node1, 515.2608835057, -351.11779707458)

var node2 = ::rendergraph::nodes::shader::Shader()
node2.query_param("inc_dir").value = ""

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

out VS_OUT {
    vec3 frag_pos;
    vec3 normal;
    vec2 tex_coord;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;

    bool uv_mapping;
    vec4 uv_props0;     // scalc_x, scale_y, offset_x, offset_y
    vec4 uv_props1;     // axis, uw_factor, tex_w, tex_h
};

const vec3 BASE_AXES[2 * 6] = vec3[](
    vec3(1, 0, 0), vec3(0, 1, 0),
    vec3(1, 0, 0), vec3(0, 0, 1),
    vec3(0, 1, 0), vec3(1, 0, 0),
    vec3(0, 1, 0), vec3(0, 0, 1),
    vec3(0, 0, 1), vec3(1, 0, 0),
    vec3(0, 0, 1), vec3(0, 1, 0)
);

vec2 calc_uv(vec4 world_pos, vec3 normal)
{
    int axis = int(uv_props1.x);
    vec3 x_axis = BASE_AXES[axis * 2];
    vec3 y_axis = BASE_AXES[axis * 2 + 1];

    float sx = uv_props0.x;
    float sy = uv_props0.y;
    float dx = uv_props0.z;
    float dy = uv_props0.w;

    float uw_factor = uv_props1.y;

    vec2 uv;

    vec3 p = world_pos.xyz;
    if (uw_factor != 0)
    {
        vec3 z_axis = cross(x_axis, y_axis);
        p += x_axis * dot(z_axis, p) * uw_factor;
    }

    float tex_w = uv_props1.z;
    float tex_h = uv_props1.w;
    uv.x = (dot(p, x_axis / sx) + dx) / tex_w;
    uv.y = (dot(p, y_axis / sy) + dy) / tex_h;

    return uv;
}

void main()
{
    vec4 world_pos = model * vec4(aPos, 1.0);

	vs_out.frag_pos = vec3(world_pos);

    vec3 normal = mat3(transpose(inverse(model))) * aNormal;  
//    vs_out.normal = normal;
    vs_out.normal = aNormal;

    if (uv_mapping) {
        vs_out.tex_coord = calc_uv(world_pos, normal);
    } else {
        vs_out.tex_coord = aTexCoord;
    }

    gl_Position = projection * view * world_pos;
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = ""
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 frag_pos;
    vec3 normal;
    vec2 tex_coord;
} fs_in;

uniform UBO
{
	vec3 light_pos;
	vec3 cam_pos;
    vec3 color;
};

uniform sampler2D base_color;

void main()
{
	// ambient
	vec3 ambient = vec3(0.25);

	// diffuse
	const vec3 LIGHT_POS = vec3(-5.0, -5.0, 10);
	vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
    float diff = max(dot(fs_in.normal, light_dir), 0.1);
    vec4 tex_col = texture(base_color, fs_in.tex_coord);
    vec3 diffuse = diff * color * tex_col.rgb;

    // specular
    vec3 view_dir = normalize(cam_pos - fs_in.frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);  
    float spec = pow(max(dot(fs_in.normal, halfway_dir), 0.0), 32.0);
    vec3 specular = spec * vec3(1.0);

    FragColor = vec4(ambient + diffuse + specular, tex_col.a); 
}
"
node2.cs = ""
node2.render_gen()

_editor.add_node(node2, 5.8537544622729, 198.47897096237)

var node3 = ::rendergraph::nodes::clear::Clear()

node3.masks = [ "color", "depth" ]
node3.values = { "color" : [ 0.5, 0.5, 0.5, 1 ] }

_editor.add_node(node3, 516.44626889273, 56.725606251812)

var node4 = ::blueprint::nodes::perspective::Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.1
node4.zfar = 100

_editor.add_node(node4, -194.5289126027, 213.68660518867)

var node5 = ::blueprint::nodes::proxy::Proxy()

node5.real_name = "view_cam"
node5.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node5, -195.94676722514, 399.52227467053)

var node6 = ::blueprint::nodes::number3::Number3()

node6.value.set(5.9766573905945, 5.6433238983154, 5.3099908828735)

_editor.add_node(node6, -196.83918751185, 60.928765348153)

var node7 = ::blueprint::nodes::cache::Cache()
node7.query_param("disable").value = false

_editor.add_node(node7, 737.3563798317, -96.67207394932)

var node8 = ::blueprint::nodes::field_get::FieldGet()
node8.query_param("name").value = "mesh"

_editor.add_node(node8, 214.98102295717, -311.60361414467)

var node9 = ::blueprint::nodes::field_get::FieldGet()
node9.query_param("name").value = "color"

_editor.add_node(node9, -205.91153481024, -152.30193724915)

var node10 = ::blueprint::nodes::field_get::FieldGet()
node10.query_param("name").value = "texture"

_editor.add_node(node10, -208.18569166964, -196.19246486858)

var node11 = ::rendergraph::nodes::shader::Shader()
node11.query_param("inc_dir").value = ""

node11.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out VS_OUT {
    vec3 frag_pos;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;
};

void main()
{
	vs_out.frag_pos = vec3(model * vec4(aPos, 1.0));
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node11.tcs = ""
node11.tes = ""
node11.gs = ""
node11.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 frag_pos;
} fs_in;

uniform UBO
{
	vec3 light_pos;
	vec3 cam_pos;
    vec3 color;
};

void main()
{
 	vec3 dFdxPos = dFdx( fs_in.frag_pos );
    vec3 dFdyPos = dFdy( fs_in.frag_pos );
    vec3 N = normalize( cross(dFdxPos,dFdyPos ));

	// ambient
	vec3 ambient = vec3(0.25);

	// diffuse
	const vec3 LIGHT_POS = vec3(-5.0, -5.0, 10);
	vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
    float diff = max(dot(N, light_dir), 0.1);
    vec3 diffuse = diff * color;

    // specular
    vec3 view_dir = normalize(cam_pos - fs_in.frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);  
    float spec = pow(max(dot(N, halfway_dir), 0.0), 32.0);
    vec3 specular = spec * vec3(1.0);

    FragColor = vec4(ambient + diffuse + specular, 1.0); 
}
"
node11.cs = ""
node11.render_gen()

_editor.add_node(node11, 6.7657009182429, -304.16270103295)

var node12 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node12, 324.60999432761, -43.12298506196)

var node13 = ::blueprint::nodes::is_null::IsNull()

_editor.add_node(node13, 178.38072160033, -135.35281545081)

var node14 = ::blueprint::nodes::for_each::ForEach()

_editor.add_node(node14, 901.69828136719, -82.505942138672)

var node15 = ::blueprint::nodes::list_flatten::ListFlatten()

_editor.add_node(node15, 605.43939208984, -97.611633300781)

var node16 = ::blueprint::nodes::field_get::FieldGet()
node16.query_param("name").value = "trans"

_editor.add_node(node16, -208.64794077413, -240.93797311356)

var node17 = ::blueprint::nodes::field_get::FieldGet()
node17.query_param("name").value = "vao"

_editor.add_node(node17, 357.8098034668, -313.02820922852)

var node18 = ::blueprint::nodes::field_get::FieldGet()
node18.query_param("name").value = "uv_gpu"

_editor.add_node(node18, -391.29397917413, 371.08616988644)

var node19 = ::blueprint::nodes::field_get::FieldGet()
node19.query_param("name").value = "uv_props0"

_editor.add_node(node19, -390.7018304138, 327.54195501041)

var node20 = ::blueprint::nodes::field_get::FieldGet()
node20.query_param("name").value = "uv_props1"

_editor.add_node(node20, -391.52827669479, 282.91385583685)

var node21 = ::rendergraph::nodes::blending::Blending()
node21.query_param("enable").value = true
node21.query_param("src").value = "src_alpha"
node21.query_param("dst").value = "one_minus_src_alpha"

_editor.add_node(node21, 358.70087428849, -396.41483872641)

Blueprint.connect(node14, "out", node20, "value")
Blueprint.connect(node14, "out", node19, "value")
Blueprint.connect(node14, "out", node18, "value")
Blueprint.connect(node14, "out", node16, "value")
Blueprint.connect(node14, "out", node10, "value")
Blueprint.connect(node10, "field", node13, "in")
Blueprint.connect(node14, "out", node9, "value")
Blueprint.connect(node14, "out", node8, "value")
Blueprint.connect(node8, "field", node17, "value")
Blueprint.connect(node5, "zoom", node4, "fovy")
Blueprint.connect(node16, "field", node11, "model")
Blueprint.connect(node5, "mat", node11, "view")
Blueprint.connect(node4, "mat", node11, "projection")
Blueprint.connect(node6, "v3", node11, "light_pos")
Blueprint.connect(node5, "pos", node11, "cam_pos")
Blueprint.connect(node9, "field", node11, "color")
Blueprint.connect(node16, "field", node2, "model")
Blueprint.connect(node5, "mat", node2, "view")
Blueprint.connect(node4, "mat", node2, "projection")
Blueprint.connect(node18, "field", node2, "uv_mapping")
Blueprint.connect(node19, "field", node2, "uv_props0")
Blueprint.connect(node20, "field", node2, "uv_props1")
Blueprint.connect(node6, "v3", node2, "light_pos")
Blueprint.connect(node5, "pos", node2, "cam_pos")
Blueprint.connect(node9, "field", node2, "color")
Blueprint.connect(node10, "field", node2, "base_color")
Blueprint.connect(node13, "out", node12, "cond")
Blueprint.connect(node11, "out", node12, "true")
Blueprint.connect(node2, "out", node12, "false")
Blueprint.connect(node12, "result", node1, "shader")
Blueprint.connect(node17, "field", node1, "va")
Blueprint.connect(node3, "next", node14, "prev")
Blueprint.connect(node7, "var", node14, "in")
Blueprint.connect(node1, "next", node14, "do")
Blueprint.connect(node0, "var", node15, "list")
Blueprint.connect(node15, "list", node7, "var")
