var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "geos"
node0.var_type = "array"

_editor.add_node(node0, 475.80746742901, -99.7274483392)

var node1 = ::rendergraph::nodes::draw::Draw()

node1.set_prim_type("triangles")
node1.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node1.skip = false

_editor.add_node(node1, 515.2608835057, -351.11779707458)

var node2 = ::rendergraph::nodes::shader::Shader()
node2.query_param("inc_dir").value = ""

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;

out VS_OUT {
    vec3 frag_pos;
    vec2 tex_coord;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;
};

void main()
{
	vs_out.frag_pos = vec3(model * vec4(aPos, 1.0));
    vs_out.tex_coord = aTexCoord;
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = ""
node2.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 frag_pos;
    vec2 tex_coord;
} fs_in;

uniform UBO
{
	vec3 light_pos;
	vec3 cam_pos;
    vec3 color;
};

uniform sampler2D base_color;

void main()
{
 	vec3 dFdxPos = dFdx( fs_in.frag_pos );
    vec3 dFdyPos = dFdy( fs_in.frag_pos );
    vec3 N = normalize( cross(dFdxPos,dFdyPos ));

	// ambient
	vec3 ambient = vec3(0.25);

	// diffuse
	const vec3 LIGHT_POS = vec3(-5.0, -5.0, 10);
	vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
    float diff = max(dot(N, light_dir), 0.1);
    vec3 diffuse = diff * color * texture(base_color, fs_in.tex_coord).rgb;

    // specular
    vec3 view_dir = normalize(cam_pos - fs_in.frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);  
    float spec = pow(max(dot(N, halfway_dir), 0.0), 32.0);
    vec3 specular = spec * vec3(1.0);

    FragColor = vec4(ambient + diffuse + specular, 1.0); 
}
"
node2.cs = ""
node2.render_gen()

_editor.add_node(node2, 5.8537544622729, 198.47897096237)

var node3 = ::rendergraph::nodes::clear::Clear()

node3.masks = [ "color", "depth" ]
node3.values = { "color" : [ 0.5, 0.5, 0.5, 1 ] }

_editor.add_node(node3, 516.44626889273, 56.725606251812)

var node4 = ::blueprint::nodes::perspective::Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.1
node4.zfar = 100

_editor.add_node(node4, -194.5289126027, 213.68660518867)

var node5 = ::blueprint::nodes::proxy::Proxy()

node5.real_name = "view_cam"
node5.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node5, -204.41676722514, 396.89227467053)

var node6 = ::blueprint::nodes::number3::Number3()

node6.value.set(5.9766573905945, 5.6433238983154, 5.3099908828735)

_editor.add_node(node6, -193.20282387549, 70.019674439062)

var node7 = ::blueprint::nodes::cache::Cache()
node7.query_param("disable").value = false

_editor.add_node(node7, 737.3563798317, -96.67207394932)

var node8 = ::blueprint::nodes::field_get::FieldGet()
node8.query_param("name").value = "mesh"

_editor.add_node(node8, 385.6316690879, -289.03281775098)

var node9 = ::blueprint::nodes::field_get::FieldGet()
node9.query_param("name").value = "color"

_editor.add_node(node9, -229.9349807994, -158.77193743543)

var node10 = ::blueprint::nodes::field_get::FieldGet()
node10.query_param("name").value = "texture"

_editor.add_node(node10, -229.66336023426, -206.22655344922)

var node11 = ::rendergraph::nodes::shader::Shader()
node11.query_param("inc_dir").value = ""

node11.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out VS_OUT {
    vec3 frag_pos;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;
};

void main()
{
	vs_out.frag_pos = vec3(model * vec4(aPos, 1.0));
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}
"
node11.tcs = ""
node11.tes = ""
node11.gs = ""
node11.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 frag_pos;
} fs_in;

uniform UBO
{
	vec3 light_pos;
	vec3 cam_pos;
    vec3 color;
};

void main()
{
 	vec3 dFdxPos = dFdx( fs_in.frag_pos );
    vec3 dFdyPos = dFdy( fs_in.frag_pos );
    vec3 N = normalize( cross(dFdxPos,dFdyPos ));

	// ambient
	vec3 ambient = vec3(0.25);

	// diffuse
	const vec3 LIGHT_POS = vec3(-5.0, -5.0, 10);
	vec3 light_dir = normalize(light_pos - fs_in.frag_pos);
    float diff = max(dot(N, light_dir), 0.1);
    vec3 diffuse = diff * color;

    // specular
    vec3 view_dir = normalize(cam_pos - fs_in.frag_pos);
    vec3 halfway_dir = normalize(light_dir + view_dir);  
    float spec = pow(max(dot(N, halfway_dir), 0.0), 32.0);
    vec3 specular = spec * vec3(1.0);

    FragColor = vec4(ambient + diffuse + specular, 1.0); 
}
"
node11.cs = ""
node11.render_gen()

_editor.add_node(node11, 6.7657009182429, -304.16270103295)

var node12 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node12, 324.60999432761, -43.12298506196)

var node13 = ::blueprint::nodes::is_null::IsNull()

_editor.add_node(node13, 178.38072160033, -135.35281545081)

var node14 = ::blueprint::nodes::for_each::ForEach()

_editor.add_node(node14, 901.69828136719, -82.505942138672)

var node15 = ::blueprint::nodes::list_flatten::ListFlatten()

_editor.add_node(node15, 605.43939208984, -97.611633300781)

var node16 = ::blueprint::nodes::field_get::FieldGet()
node16.query_param("name").value = "trans"

_editor.add_node(node16, -231.00110840426, -258.32377015922)

Blueprint.connect(node14, "out", node16, "value")
Blueprint.connect(node14, "out", node10, "value")
Blueprint.connect(node10, "field", node13, "in")
Blueprint.connect(node14, "out", node9, "value")
Blueprint.connect(node14, "out", node8, "value")
Blueprint.connect(node5, "zoom", node4, "fovy")
Blueprint.connect(node16, "field", node11, "model")
Blueprint.connect(node5, "mat", node11, "view")
Blueprint.connect(node4, "mat", node11, "projection")
Blueprint.connect(node6, "v3", node11, "light_pos")
Blueprint.connect(node5, "pos", node11, "cam_pos")
Blueprint.connect(node9, "field", node11, "color")
Blueprint.connect(node16, "field", node2, "model")
Blueprint.connect(node5, "mat", node2, "view")
Blueprint.connect(node4, "mat", node2, "projection")
Blueprint.connect(node6, "v3", node2, "light_pos")
Blueprint.connect(node5, "pos", node2, "cam_pos")
Blueprint.connect(node9, "field", node2, "color")
Blueprint.connect(node10, "field", node2, "base_color")
Blueprint.connect(node13, "out", node12, "cond")
Blueprint.connect(node11, "out", node12, "true")
Blueprint.connect(node2, "out", node12, "false")
Blueprint.connect(node12, "result", node1, "shader")
Blueprint.connect(node8, "field", node1, "va")
Blueprint.connect(node3, "next", node14, "prev")
Blueprint.connect(node7, "var", node14, "in")
Blueprint.connect(node1, "next", node14, "do")
Blueprint.connect(node0, "var", node15, "list")
Blueprint.connect(node15, "list", node7, "var")
