var node0 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node0, -518.08635916386, -110.94944992639)

var node1 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node1, -519.08635916386, 85.050550073612)

var node2 = ::rendergraph::nodes::texture::Texture()
node2.query_param("unif_name").value = "u_tex"
node2.gamma_correction = false
node2.init_texture(1024, 1024, "rgba16f")

_editor.add_node(node2, -741.08635916386, 183.05055007361)

var node3 = ::rendergraph::nodes::texture::Texture()
node3.query_param("unif_name").value = "u_tex"
node3.gamma_correction = false
node3.init_texture(1024, 1024, "rgba16f")

_editor.add_node(node3, -737.08635916386, -155.94944992639)

var node4 = ::rendergraph::nodes::draw::Draw()

node4.set_prim_type("tri_strip")
node4.render_state = { "blend" : false, "depth_test" : false, "depth_func" : "less", "cull" : "disable", "clip_plane" : false }
node4.skip = false

_editor.add_node(node4, 354.00457548614, 88.464645445912)

var node5 = ::rendergraph::nodes::shader::Shader()

node5.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoords;

out vec2 TexCoords;

void main()
{
    TexCoords = aTexCoords;
    gl_Position = vec4(aPos, 1.0);
}
"
node5.tcs = ""
node5.tes = ""
node5.gs = ""
node5.fs = "
#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D image;
uniform sampler2D tensor;

void main()
{          
    vec3 ori_col = texture(image, TexCoords).rgb;

    vec4 t = texture(tensor, TexCoords);
//    float theta = atan((t.y - 0.5) * 2, (t.x - 0.5) * 2) / 2;
//    float theta = atan(t.y, t.x) / 2;
//    float theta = atan(t.y, t.x);
//    theta = acos(t.x);

//    float theta = t.x;
    float theta = atan(t.y, t.x) / 2;

//    theta = 30.0 / 180.0 * 3.14;
    vec2 dir = vec2(cos(theta), sin(theta));
//    vec2 dir = vec2(0, 1);

    vec2 uv = TexCoords + 0.02 * dir;

    vec3 new_col = texture(image, uv).rgb;

    float blend = 0.5;
    FragColor = vec4(ori_col * (1 - blend) + new_col * blend, 1.0);
//    FragColor = vec4(new_col, 1.0);
}
"
node5.cs = ""
node5.render_gen()

_editor.add_node(node5, 121.82353928574, 153.19417395174)

var node6 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node6.type = "quad"
node6.layout = [ "position", "texture" ]
node6.shape_params = {  }

_editor.add_node(node6, 163.76576242049, 22.62740349013)

var node7 = ::blueprint::nodes::input::Input()

node7.var_name = "base_texture"
node7.var_type = "texture"

_editor.add_node(node7, -501.2185341028, 423.14973289002)

var node8 = ::blueprint::nodes::output::Output()

node8.var_name = "tex"
node8.var_type = "texture"

_editor.add_node(node8, -566.0532968064, 329.16260623144)

var node9 = ::rendergraph::nodes::pass::Pass()

node9.once = false

_editor.add_node(node9, 521.00667770717, 167.55377219985)

var node10 = ::blueprint::nodes::loop::Loop()

node10.start = 0
node10.end = 10

_editor.add_node(node10, 828.37925900993, 122.74710800776)

var node11 = ::blueprint::nodes::input::Input()

node11.var_name = "tensor_field"
node11.var_type = "texture"

_editor.add_node(node11, -42.538422908202, 95.825218239381)

var node12 = ::blueprint::nodes::switch_f::SwitchF()

_editor.add_node(node12, 527.1412979126, 486.28977050781)

var node13 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node13, 380.84127807617, 516.38977050781)

var node14 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node14, 245.54129638672, 425.08975830078)

var node15 = ::blueprint::nodes::integer::Integer()

node15.value = 0

_editor.add_node(node15, 245.5412902832, 506.48977661133)

var node16 = ::blueprint::nodes::integer::Integer()

node16.value = 1

_editor.add_node(node16, 97.29170503222, 411.84928074356)

var node17 = ::blueprint::nodes::integer::Integer()

node17.value = 2

_editor.add_node(node17, 101.69170045459, 345.84926853653)

var node18 = ::blueprint::nodes::compare::Compare()

node18.cmp = "equal"

_editor.add_node(node18, 243.26581642844, 581.69226629084)

var node19 = ::blueprint::nodes::integer::Integer()

node19.value = 0

_editor.add_node(node19, 104.3702519601, 570.18963668904)

var node20 = ::blueprint::nodes::compare::Compare()

node20.cmp = "equal"

_editor.add_node(node20, 100.21189393145, 490.90692051544)

var node21 = ::blueprint::nodes::mod::Mod()

_editor.add_node(node21, -33.708877322733, 547.40320645052)

var node22 = ::blueprint::nodes::integer::Integer()

node22.value = 2

_editor.add_node(node22, -176.84423543814, 523.67190045043)

var node23 = ::blueprint::nodes::integer::Integer()

node23.value = 1

_editor.add_node(node23, -37.941396052635, 479.9930649205)

var node24 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node24, 378.16449588672, -160.78009329922)

var node25 = ::blueprint::nodes::integer::Integer()

node25.value = 10

_editor.add_node(node25, 532.24254314986, 73.528999890802)

var node26 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node26, 663.15158966974, 52.619899271573)

var node27 = ::blueprint::nodes::integer::Integer()

node27.value = 1

_editor.add_node(node27, 534.06071941939, 0.80172022771663)

Blueprint.connect(node25, "v", node26, "a")
Blueprint.connect(node27, "v", node26, "b")
Blueprint.connect(node9, "next", node10, "do")
Blueprint.connect(node26, "v", node10, "end")
Blueprint.connect(node10, "index", node21, "x")
Blueprint.connect(node22, "v", node21, "y")
Blueprint.connect(node21, "v", node20, "a")
Blueprint.connect(node23, "v", node20, "b")
Blueprint.connect(node10, "index", node18, "a")
Blueprint.connect(node19, "v", node18, "b")
Blueprint.connect(node20, "out", node14, "cond")
Blueprint.connect(node16, "v", node14, "true")
Blueprint.connect(node17, "v", node14, "false")
Blueprint.connect(node18, "out", node13, "cond")
Blueprint.connect(node15, "v", node13, "true")
Blueprint.connect(node14, "result", node13, "false")
Blueprint.connect(node4, "next", node9, "do")
Blueprint.connect(node24, "result", node9, "fbo")
Blueprint.connect(node3, "tex", node0, "col0")
Blueprint.connect(node13, "result", node12, "type")
Blueprint.connect(node7, "var", node12, "case0")
Blueprint.connect(node3, "tex", node12, "case1")
Blueprint.connect(node2, "tex", node12, "case2")
Blueprint.connect(node12, "result", node5, "image")
Blueprint.connect(node11, "var", node5, "tensor")
Blueprint.connect(node5, "out", node4, "shader")
Blueprint.connect(node6, "out", node4, "va")
Blueprint.connect(node2, "tex", node8, "var")
Blueprint.connect(node2, "tex", node1, "col0")
Blueprint.connect(node20, "out", node24, "cond")
Blueprint.connect(node1, "fbo", node24, "true")
Blueprint.connect(node0, "fbo", node24, "false")
