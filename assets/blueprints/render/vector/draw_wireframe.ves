var node0 = ::geograph::nodes::brush_to_gltf::BrushToGltf()

_editor.add_node(node0, -20.676023581753, -291.10174525378)

var node1 = ::blueprint::nodes::fetch::Fetch()
node1.index = "node0"

_editor.add_node(node1, 388.89706620375, -340.77785816952)

var node2 = ::blueprint::nodes::fetch::Fetch()
node2.index = "va"

_editor.add_node(node2, 589.87377684355, -341.75460276614)

var node3 = ::blueprint::nodes::input::Input()

node3.var_name = "geos"
node3.var_type = "array"

_editor.add_node(node3, 1000.0138585934, 109.41430090309)

var node4 = ::rendergraph::nodes::draw::Draw()

node4.set_prim_type("triangles")
node4.render_state = { "stencil_test" : false, "stencil_func" : "always", "stencil_mask" : 255, "cull" : "disable", "blend" : true, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "lequal", "clip_plane" : false }
node4.skip = false

_editor.add_node(node4, 784.30380359571, -191.81447758435)

var node5 = ::rendergraph::nodes::shader::Shader()

node5.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

out vec2 window_pos;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;

    mat4 viewport_trans;    
};

vec4 clip_to_window_coords(vec4 v)
{
    v.xyz /= v.w;                                    // normalized device coordinates
    v.xyz = (viewport_trans * vec4(v.xyz, 1.0)).xyz; // window coordinates
    return v;
}

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    window_pos = clip_to_window_coords(gl_Position).xy;
}
"
node5.tcs = ""
node5.tes = ""
node5.gs = "
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in vec2 window_pos[];
noperspective out vec3 distanceToEdges;

float dist_to_line(vec2 f, vec2 p0, vec2 p1)
{
    vec2 l = f - p0;
    vec2 d = p1 - p0;

    //
    // Closed point on line to f
    //
    vec2 p = p0 + (d * (dot(l, d) / dot(d, d)));
    return distance(f, p);
}

void main()
{
    vec2 p0 = window_pos[0];
    vec2 p1 = window_pos[1];
    vec2 p2 = window_pos[2];

    gl_Position = gl_in[0].gl_Position;
    distanceToEdges = vec3(dist_to_line(p0, p1, p2), 0.0, 0.0);
    EmitVertex();

    gl_Position = gl_in[1].gl_Position;
    distanceToEdges = vec3(0.0, dist_to_line(p1, p2, p0), 0.0);
    EmitVertex();

    gl_Position = gl_in[2].gl_Position;
    distanceToEdges = vec3(0.0, 0.0, dist_to_line(p2, p0, p1));
    EmitVertex();
}
"
node5.fs = "
#version 330 core
out vec4 FragColor;

noperspective in vec3 distanceToEdges;

uniform UBO
{
    float u_halfLineWidth;
    vec3 u_color;
} ubo_fs;

void main()
 {
    float d = min(distanceToEdges.x, min(distanceToEdges.y, distanceToEdges.z));

    if (d > ubo_fs.u_halfLineWidth + 1.0)
    {
        discard;
    }

//    d = clamp(d - (ubo_fs.u_halfLineWidth - 1.0), 0.0, 2.0);
//    FragColor = vec4(ubo_fs.u_color, exp2(-2.0 * d * d));

    d = ubo_fs.u_halfLineWidth + 1.0 - d;
    FragColor = vec4(ubo_fs.u_color, d * 0.1);
}
"
node5.cs = ""
node5.render_gen()

_editor.add_node(node5, 584.94667455228, -116.8877095474)

var node6 = ::rendergraph::nodes::clear::Clear()

node6.masks = [ "color", "depth" ]
node6.values = { "color" : [ 0.5, 0.5, 0.5, 1 ] }

_editor.add_node(node6, 996.66028898274, 225.89512574204)

var node7 = ::blueprint::nodes::perspective::Perspective()

node7.fovy = 45
node7.aspect = 0
node7.znear = 0.1
node7.zfar = 100

_editor.add_node(node7, 409.20400748731, -103.6600753211)

var node8 = ::blueprint::nodes::proxy::Proxy()

node8.real_name = "view_cam"
node8.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node8, 409.76615286487, 48.85559416076)

var node9 = ::blueprint::nodes::number3::Number3()

node9.value.set(5.9766573905945, 5.6433238983154, 5.3099908828735)

_editor.add_node(node9, 410.31009621452, -231.15700607071)

var node10 = ::blueprint::nodes::for_each::ForEach()

_editor.add_node(node10, 1164.9441409146, 107.00451606488)

var node11 = ::blueprint::nodes::is_null::IsNull()

_editor.add_node(node11, 408.58502375197, 156.999198382)

var node12 = ::blueprint::nodes::branch::Branch()

_editor.add_node(node12, 1011.9389355872, 20.226619751981)

var node13 = ::geograph::nodes::draw_geometry::DrawGeometry()
node13.query_param("skip").value = false

_editor.add_node(node13, 783.1307712437, 32.615556424757)

var node14 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node14, 560.9265762203, 75.875717541404)

var node15 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node15, 257.9403503418, -155.43645629883)

var node16 = ::blueprint::nodes::integer::Integer()

node16.value = 10

_editor.add_node(node16, 266.94211988213, -244.42057926399)

var node17 = ::blueprint::nodes::number3::Number3()

node17.value.set(1, 0, 0)

_editor.add_node(node17, 143.80163574219, -8.0569458007813)

Blueprint.connect(node8, "zoom", node7, "fovy")
Blueprint.connect(node7, "mat", node14, "a")
Blueprint.connect(node8, "mat", node14, "b")
Blueprint.connect(node10, "out", node13, "geos")
Blueprint.connect(node14, "v", node13, "mat")
Blueprint.connect(node8, "mat", node5, "view")
Blueprint.connect(node7, "mat", node5, "projection")
Blueprint.connect(node15, "trans", node5, "viewport_trans")
Blueprint.connect(node16, "v", node5, "ubo_fs.u_halfLineWidth")
Blueprint.connect(node17, "v3", node5, "ubo_fs.u_color")
Blueprint.connect(node6, "next", node10, "prev")
Blueprint.connect(node3, "var", node10, "in")
Blueprint.connect(node12, "next", node10, "do")
Blueprint.connect(node10, "out", node0, "brush")
Blueprint.connect(node0, "gltf", node11, "in")
Blueprint.connect(node11, "out", node12, "cond")
Blueprint.connect(node13, "next", node12, "true")
Blueprint.connect(node4, "next", node12, "false")
Blueprint.connect(node0, "gltf", node1, "items")
Blueprint.connect(node1, "item", node2, "items")
Blueprint.connect(node5, "out", node4, "shader")
Blueprint.connect(node2, "item", node4, "va")
