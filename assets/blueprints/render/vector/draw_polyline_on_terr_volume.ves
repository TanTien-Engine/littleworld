var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "geos"
node0.var_type = "array"

_editor.add_node(node0, -494.13485121331, 407.68534883181)

var node1 = ::rendergraph::nodes::shader::Shader()

node1.vs = "
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec4 color;

out VS_OUT {
    vec3 color;
    mat4 mvp_mat;
} vs_out;

uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 projection;
};

void main()
{
    vs_out.color = color.rgb;
    vs_out.mvp_mat = projection * view * model;

    gl_Position = vec4(position, 1.0);
}
"
node1.tcs = ""
node1.tes = ""
node1.gs = "

layout(lines) in;
layout(triangle_strip, max_vertices = 36) out;

in VS_OUT {
    vec3 color;
    mat4 mvp_mat;
} gs_in[];

out GS_OUT {
    vec3 color;
} gs_out;

uniform UBO
{
    mat4 viewport_trans;
    mat4 viewport_ortho;

    float z_near;

    float fill_dist;
};

vec4 model_to_clip_coords(vec4 v)
{
    return gs_in[0].mvp_mat * v;
}

vec4 clip_to_window_coords(vec4 v)
{
    v.xyz /= v.w;                                    // normalized device coordinates
    v.xyz = (viewport_trans * vec4(v.xyz, 1.0)).xyz; // window coordinates
    return v;
}

void clip_line_seg_to_near_plane(out vec4 clip0, out vec4 clip1, out bool culled)
{
    vec4 model0 = gl_in[0].gl_Position;
    vec4 model1 = gl_in[1].gl_Position;
    clip0 = model_to_clip_coords(model0);
    clip1 = model_to_clip_coords(model1);
    culled = false;

    float dist0 = clip0.z - z_near;
    float dist1 = clip1.z - z_near;

    if (dist0 * dist1 < 0)
    {
        float t = dist0 / (dist0 - dist1);
        vec3 modelv = vec3(model0) + t * (vec3(model1) - vec3(model0));
        vec4 clipv = model_to_clip_coords(vec4(modelv, 1));
        if (dist0 < 0.0) {
            clip0 = clipv;
        } else {
            clip1 = clipv;
        }
    }
    else if (dist0 < 0)
    {
        culled = true;
    }
}

void emit_quad(vec4 v0, vec4 v1, vec4 v2, vec4 v3)
{
    gs_out.color = gs_in[0].color;
    gl_Position = gs_in[0].mvp_mat * v0;
    EmitVertex();

    gs_out.color = gs_in[1].color;
    gl_Position = gs_in[0].mvp_mat * v1;
    EmitVertex();

    gs_out.color = gs_in[0].color;
    gl_Position = gs_in[0].mvp_mat * v2;
    EmitVertex();

    EndPrimitive();

    gs_out.color = gs_in[0].color;
    gl_Position = gs_in[0].mvp_mat * v0;
    EmitVertex();

    gs_out.color = gs_in[0].color;
    gl_Position = gs_in[0].mvp_mat * v2;
    EmitVertex();

    gs_out.color = gs_in[1].color;
    gl_Position = gs_in[0].mvp_mat * v3;
    EmitVertex();    

    EndPrimitive();
}

void main()
{
    vec4 p0 = gl_in[0].gl_Position;
    vec4 p1 = gl_in[1].gl_Position;
    p0.y -= 0.01;
    p1.y -= 0.01;

    vec2 direction = p1.xz - p0.xz;
    vec2 normal = normalize(vec2(direction.y, -direction.x));

    float fill_dist = 0.01;

    vec4 v0 = p0; v0.xz -= normal * fill_dist;
    vec4 v1 = p1; v1.xz -= normal * fill_dist;
    vec4 v2 = p1; v2.xz += normal * fill_dist;
    vec4 v3 = p0; v3.xz += normal * fill_dist;

    vec4 h = vec4(0, 0.2, 0, 0);

    emit_quad(v3, v2, v1, v0);
    emit_quad(v0 + h, v1 + h, v2 + h, v3 + h);
    emit_quad(v0, v1, v1 + h, v0 + h);
    emit_quad(v1, v2, v2 + h, v1 + h);
    emit_quad(v2, v3, v3 + h, v2 + h);
    emit_quad(v3, v0, v0 + h, v3 + h);
}

"
node1.fs = "
#version 330 core
out vec4 FragColor;

void main()
{
//    FragColor = vec4(1.0, 1.0, 0.0, 0.4);
}
"
node1.cs = ""
node1.render_gen()

_editor.add_node(node1, -248.34039889079, -264.73766161868)

var node2 = ::blueprint::nodes::perspective::Perspective()

node2.fovy = 45
node2.aspect = 0
node2.znear = 0.1
node2.zfar = 100

_editor.add_node(node2, -520.74091719543, 64.00567508696)

var node3 = ::blueprint::nodes::proxy::Proxy()

node3.real_name = "view_cam"
node3.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node3, -518.09758262936, 226.82382390766)

var node4 = ::blueprint::nodes::number3::Number3()

node4.value.set(5.9766573905945, 5.6433238983154, 5.3099908828735)

_editor.add_node(node4, -511.7692591765, -249.83300827519)

var node5 = ::globegraph::nodes::vector_data::VectorData()

_editor.add_node(node5, -351.51126267426, 415.36653807432)

var node6 = ::blueprint::nodes::cache::Cache()
node6.query_param("disable").value = false

_editor.add_node(node6, -194.06795501267, 404.86873023518)

var node7 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node7, -515.45348882313, -76.4319084145)

var node8 = ::rendergraph::nodes::clear::Clear()

node8.masks = [ "stencil" ]
node8.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node8, 184.43697662795, 417.28057105549)

var node9 = ::blueprint::nodes::integer::Integer()

node9.value = 3

_editor.add_node(node9, -518.3117871327, -153.82199519539)

var node10 = ::rendergraph::nodes::draw::Draw()

node10.set_prim_type("line_strip")
node10.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "prim_restart" : true, "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node10.skip = false

_editor.add_node(node10, 450.0222061201, 170.56033962862)

var node11 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node11, -512.53984938768, -372.98407956462)

var node12 = ::rendergraph::nodes::depth_clamp::DepthClamp()
node12.query_param("enable").value = true

_editor.add_node(node12, 131.66279791851, 178.32444830089)

var node13 = ::rendergraph::nodes::stencil_test::StencilTest()
node13.query_param("face").value = "front"
node13.query_param("func").value = "always"
node13.query_param("ref").value = 2
node13.query_param("fail_op").value = "decrement_wrap"
node13.query_param("pass_op").value = "keep"

_editor.add_node(node13, -17.914192893288, 148.03779879722)

var node14 = ::rendergraph::nodes::stencil_test::StencilTest()
node14.query_param("face").value = "back"
node14.query_param("func").value = "always"
node14.query_param("ref").value = 3
node14.query_param("fail_op").value = "increment_wrap"
node14.query_param("pass_op").value = "keep"

_editor.add_node(node14, -164.74138575026, 147.53317626953)

var node15 = ::rendergraph::nodes::shader::Shader()

node15.vs = "
#version 330 core
layout (location = 0) in vec3 position;

void main()
{
    gl_Position = vec4(position, 1.0);
}
"
node15.tcs = ""
node15.tes = ""
node15.gs = ""
node15.fs = "
#version 330 core
out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0, 0.0, 0.0, 0.5);
}
"
node15.cs = ""
node15.render_gen()

_editor.add_node(node15, 595.33724345114, -84.924753562921)

var node16 = ::rendergraph::nodes::draw::Draw()

node16.set_prim_type("tri_strip")
node16.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "prim_restart" : true, "stencil_mask" : 255, "cull" : "back", "blend" : true, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "lequal", "clip_plane" : false }
node16.skip = false

_editor.add_node(node16, 800.4052761201, -205.22622457048)

var node17 = ::rendergraph::nodes::stencil_test::StencilTest()
node17.query_param("face").value = "front_and_back"
node17.query_param("func").value = "notequal"
node17.query_param("ref").value = 0
node17.query_param("fail_op").value = "keep"
node17.query_param("pass_op").value = "keep"

_editor.add_node(node17, 454.22462082053, -369.21506400362)

var node18 = ::rendergraph::nodes::z_write::ZWrite()
node18.query_param("enable").value = false

_editor.add_node(node18, 627.10620054953, -328.22578548995)

var node19 = ::rendergraph::nodes::z_write::ZWrite()
node19.query_param("enable").value = false

_editor.add_node(node19, 273.986420246, 182.20432542772)

var node20 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node20.type = "quad"
node20.layout = [ "position" ]
node20.shape_params = {  }

_editor.add_node(node20, 626.48284213647, -198.80577928649)

var node21 = ::rendergraph::nodes::stencil_test::StencilTest()
node21.query_param("face").value = "front"
node21.query_param("func").value = "always"
node21.query_param("ref").value = 0
node21.query_param("fail_op").value = "keep"
node21.query_param("pass_op").value = "increment_wrap"

_editor.add_node(node21, -15.045722893288, -10.644947272731)

var node22 = ::rendergraph::nodes::stencil_test::StencilTest()
node22.query_param("face").value = "back"
node22.query_param("func").value = "always"
node22.query_param("ref").value = 0
node22.query_param("fail_op").value = "keep"
node22.query_param("pass_op").value = "decrement_wrap"

_editor.add_node(node22, -162.69936203125, -11.714043730471)

Blueprint.connect(node22, "rs", node21, "rs")
Blueprint.connect(node17, "rs", node18, "rs")
Blueprint.connect(node14, "rs", node13, "rs")
Blueprint.connect(node13, "rs", node12, "rs")
Blueprint.connect(node12, "rs", node19, "rs")
Blueprint.connect(node3, "zoom", node2, "fovy")
Blueprint.connect(node2, "znear", node7, "znear")
Blueprint.connect(node2, "zfar", node7, "zfar")
Blueprint.connect(node3, "mat", node1, "view")
Blueprint.connect(node2, "mat", node1, "projection")
Blueprint.connect(node7, "trans", node1, "viewport_trans")
Blueprint.connect(node7, "ortho", node1, "viewport_ortho")
Blueprint.connect(node2, "znear", node1, "z_near")
Blueprint.connect(node9, "v", node1, "fill_dist")
Blueprint.connect(node0, "var", node5, "geos")
Blueprint.connect(node5, "va", node6, "var")
Blueprint.connect(node8, "next", node10, "prev")
Blueprint.connect(node1, "out", node10, "shader")
Blueprint.connect(node6, "var", node10, "va")
Blueprint.connect(node19, "rs", node10, "rs")
Blueprint.connect(node10, "next", node16, "prev")
Blueprint.connect(node15, "out", node16, "shader")
Blueprint.connect(node20, "out", node16, "va")
Blueprint.connect(node18, "rs", node16, "rs")
