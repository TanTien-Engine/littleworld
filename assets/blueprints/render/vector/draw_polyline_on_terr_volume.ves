var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "geos"
node0.var_type = "array"

_editor.add_node(node0, -423.27538770881, -154.24726766619)

var node1 = ::rendergraph::nodes::shader::Shader()

node1.vs = "
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec4 color;

out VS_OUT {
    vec3 color;
    mat4 mvp_mat;
} vs_out;

uniform UBO
{
    mat4 model;
    mat4 view;
    mat4 projection;
};

void main()
{
    vs_out.color = color.rgb;
    vs_out.mvp_mat = projection * view * model;

    gl_Position = vec4(position, 1.0);
}
"
node1.tcs = ""
node1.tes = ""
node1.gs = "

layout(lines) in;
layout(triangle_strip, max_vertices = 36) out;

in VS_OUT {
    vec3 color;
    mat4 mvp_mat;
} gs_in[];

out GS_OUT {
    vec3 color;
} gs_out;

uniform UBO
{
    mat4 viewport_trans;
    mat4 viewport_ortho;

    float fill_dist;
    float volume_h;
};

void emit_quad(vec4 v0, vec4 v1, vec4 v2, vec4 v3)
{
    gs_out.color = gs_in[0].color;
    gl_Position = gs_in[0].mvp_mat * v0;
    EmitVertex();

    gs_out.color = gs_in[1].color;
    gl_Position = gs_in[0].mvp_mat * v1;
    EmitVertex();

    gs_out.color = gs_in[0].color;
    gl_Position = gs_in[0].mvp_mat * v3;
    EmitVertex();

    gs_out.color = gs_in[1].color;
    gl_Position = gs_in[0].mvp_mat * v2;
    EmitVertex();    

    EndPrimitive();
}

void main()
{
    vec4 p0 = gl_in[0].gl_Position;
    vec4 p1 = gl_in[1].gl_Position;
    p0.y -= 0.01;
    p1.y -= 0.01;

    vec2 direction = p1.xz - p0.xz;
    vec2 normal = normalize(vec2(direction.y, -direction.x));

    float dist = fill_dist * 0.1;
    vec4 v0 = p0; v0.xz -= normal * dist;
    vec4 v1 = p1; v1.xz -= normal * dist;
    vec4 v2 = p1; v2.xz += normal * dist;
    vec4 v3 = p0; v3.xz += normal * dist;

    vec4 h = vec4(0, volume_h, 0, 0);

    emit_quad(v3, v2, v1, v0);
    emit_quad(v0 + h, v1 + h, v2 + h, v3 + h);
    emit_quad(v0, v1, v1 + h, v0 + h);
    emit_quad(v1, v2, v2 + h, v1 + h);
    emit_quad(v2, v3, v3 + h, v2 + h);
    emit_quad(v3, v0, v0 + h, v3 + h);
}

"
node1.fs = "
#version 330 core
out vec4 FragColor;

void main()
{
//    FragColor = vec4(1.0, 1.0, 0.0, 0.4);
}
"
node1.cs = ""
node1.render_gen()

_editor.add_node(node1, -196.7736786161, 259.82840887943)

var node2 = ::blueprint::nodes::perspective::Perspective()

node2.fovy = 45
node2.aspect = 0
node2.znear = 0.1
node2.zfar = 100

_editor.add_node(node2, -723.67428130687, 171.55283084517)

var node3 = ::blueprint::nodes::proxy::Proxy()

node3.real_name = "view_cam"
node3.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node3, -721.0309467408, 321.48689966587)

var node4 = ::globegraph::nodes::vector_data::VectorData()

_editor.add_node(node4, -288.28816280612, -144.02062387823)

var node5 = ::blueprint::nodes::cache::Cache()
node5.query_param("disable").value = false

_editor.add_node(node5, -143.75394605363, -151.60934080828)

var node6 = ::blueprint::nodes::viewport::Viewport()

_editor.add_node(node6, -718.38685293457, 31.115247343707)

var node7 = ::rendergraph::nodes::clear::Clear()

node7.masks = [ "stencil" ]
node7.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node7, -328.88504291205, 551.25767585549)

var node8 = ::rendergraph::nodes::draw::Draw()

node8.set_prim_type("line_strip")
node8.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "prim_restart" : true, "stencil_mask" : 255, "cull" : "disable", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node8.skip = false

_editor.add_node(node8, 176.8922061201, 92.02033962862)

var node9 = ::rendergraph::nodes::depth_clamp::DepthClamp()
node9.query_param("enable").value = true

_editor.add_node(node9, -198.18287437906, -272.92486891051)

var node10 = ::rendergraph::nodes::stencil_test::StencilTest()
node10.query_param("face").value = "front"
node10.query_param("func").value = "always"
node10.query_param("ref").value = 0
node10.query_param("fail_op").value = "decrement_wrap"
node10.query_param("pass_op").value = "keep"

_editor.add_node(node10, -348.85986519085, -314.21151841418)

var node11 = ::rendergraph::nodes::stencil_test::StencilTest()
node11.query_param("face").value = "back"
node11.query_param("func").value = "always"
node11.query_param("ref").value = 0
node11.query_param("fail_op").value = "increment_wrap"
node11.query_param("pass_op").value = "keep"

_editor.add_node(node11, -506.38705804783, -315.91614094187)

var node12 = ::rendergraph::nodes::shader::Shader()

node12.vs = "
#version 330 core
layout (location = 0) in vec3 position;

void main()
{
    gl_Position = vec4(position, 1.0);
}
"
node12.tcs = ""
node12.tes = ""
node12.gs = ""
node12.fs = "
#version 330 core
out vec4 FragColor;

void main()
{
    FragColor = vec4(1.0, 0.0, 0.0, 0.5);
}
"
node12.cs = ""
node12.render_gen()

_editor.add_node(node12, 661.40933053159, -32.244469795711)

var node13 = ::rendergraph::nodes::draw::Draw()

node13.set_prim_type("tri_strip")
node13.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "prim_restart" : true, "stencil_mask" : 255, "cull" : "back", "blend" : true, "stencil_ref" : 0, "depth_test" : false, "depth_func" : "lequal", "clip_plane" : false }
node13.skip = false

_editor.add_node(node13, 859.8773632006, -132.74594080327)

var node14 = ::rendergraph::nodes::stencil_test::StencilTest()
node14.query_param("face").value = "front_and_back"
node14.query_param("func").value = "notequal"
node14.query_param("ref").value = 0
node14.query_param("fail_op").value = "keep"
node14.query_param("pass_op").value = "keep"

_editor.add_node(node14, 520.29670790098, -316.53478023641)

var node15 = ::rendergraph::nodes::z_write::ZWrite()
node15.query_param("enable").value = false

_editor.add_node(node15, 693.17828762998, -275.54550172274)

var node16 = ::rendergraph::nodes::z_write::ZWrite()
node16.query_param("enable").value = false

_editor.add_node(node16, -53.659252051569, -264.64499178368)

var node17 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node17.type = "quad"
node17.layout = [ "position" ]
node17.shape_params = {  }

_editor.add_node(node17, 692.55492921692, -146.12549551928)

var node18 = ::blueprint::nodes::commentary::Commentary()

node18.set_size(1204.90014, 810.44311)
node18.title = "Pass 1, Update stencil"

_editor.add_node(node18, -290.93674829834, 422.59319814453)

var node19 = ::blueprint::nodes::commentary::Commentary()

node19.set_size(493.17, 422.627)
node19.title = "Pass 2, draw with stencil"

_editor.add_node(node19, 687.62700292969, 33.027792602538)

var node20 = ::blueprint::nodes::number::Number()

node20.value = 0.10644124448299

_editor.add_node(node20, -483.57968807706, 18.921165593926)

var node21 = ::blueprint::nodes::number::Number()

node21.value = 0.20151367783546

_editor.add_node(node21, -480.13626642034, -53.980649883636)

Blueprint.connect(node14, "rs", node15, "rs")
Blueprint.connect(node11, "rs", node10, "rs")
Blueprint.connect(node10, "rs", node9, "rs")
Blueprint.connect(node9, "rs", node16, "rs")
Blueprint.connect(node3, "zoom", node2, "fovy")
Blueprint.connect(node2, "znear", node6, "znear")
Blueprint.connect(node2, "zfar", node6, "zfar")
Blueprint.connect(node3, "mat", node1, "view")
Blueprint.connect(node2, "mat", node1, "projection")
Blueprint.connect(node6, "trans", node1, "viewport_trans")
Blueprint.connect(node6, "ortho", node1, "viewport_ortho")
Blueprint.connect(node20, "v", node1, "fill_dist")
Blueprint.connect(node21, "v", node1, "volume_h")
Blueprint.connect(node0, "var", node4, "geos")
Blueprint.connect(node4, "va", node5, "var")
Blueprint.connect(node7, "next", node8, "prev")
Blueprint.connect(node1, "out", node8, "shader")
Blueprint.connect(node5, "var", node8, "va")
Blueprint.connect(node16, "rs", node8, "rs")
Blueprint.connect(node8, "next", node13, "prev")
Blueprint.connect(node12, "out", node13, "shader")
Blueprint.connect(node17, "out", node13, "va")
Blueprint.connect(node15, "rs", node13, "rs")
