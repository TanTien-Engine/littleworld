var node0 = ::rendergraph::nodes::draw::Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "stencil_mask" : 255, "cull" : "back", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "less", "clip_plane" : false }
node0.skip = false

_editor.add_node(node0, 558.8075282446, -339.48126638417)

var node1 = ::rendergraph::nodes::shader::Shader()

node1.vs = "
#version 330 core
layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texcoord;

uniform UBO_VS
{
    mat4 projection;
    mat4 view;
    mat4 model;   

    vec3 cam_pos;
} vs;

out VS_OUT {
    vec2 texcoord;
} vs_out;

void main()
{
    vs_out.texcoord = texcoord;
    gl_Position = vs.projection * vs.view * vs.model * vec4(position, 1.0);
}

"
node1.tcs = ""
node1.tes = ""
node1.gs = ""
node1.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec2 texcoord;
} fs_in;

uniform sampler2D tensor_field;

uniform sampler2D base_tex;

void main()
{
    vec4 tensor = texture(tensor_field, fs_in.texcoord);
    float theta = atan(tensor.y, tensor.x) / 2;

    vec2 dir = vec2(cos(theta), sin(theta));
    vec2 uv = fs_in.texcoord + 0.1 * dir;

    FragColor = texture(base_tex, uv);
}
"
node1.cs = ""
node1.render_gen()

_editor.add_node(node1, 157.79557543759, -355.9795922234)

var node2 = ::rendergraph::nodes::clear::Clear()

node2.masks = [ "color", "depth" ]
node2.values = { "color" : [ 128, 128, 128, 255 ] }

_editor.add_node(node2, 335.02348918957, -188.12587085987)

var node3 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node3.type = "grids"
node3.layout = [ "position", "texture" ]
node3.shape_params = { "grids_size" : 64 }

_editor.add_node(node3, 381.67421297039, -401.33131969581)

var node4 = ::blueprint::nodes::perspective::Perspective()

node4.fovy = 45
node4.aspect = 0
node4.znear = 0.025245843455195
node4.zfar = 1000

_editor.add_node(node4, -44.721260070801, -167.46328735352)

var node5 = ::blueprint::nodes::input::Input()

node5.var_name = "tensor_field"
node5.var_type = "texture"

_editor.add_node(node5, -192.07851987472, -325.74191018398)

var node6 = ::blueprint::nodes::proxy::Proxy()

node6.real_name = "view_cam"
node6.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node6, -223.05257443076, -190.79010489722)

var node7 = ::rendergraph::nodes::texture::Texture()
node7.query_param("unif_name").value = "u_tex"
node7.gamma_correction = false
node7.init_texture("../../textures/ibfv/grid_big.png")
node7.set_sampler("nearest_repeat")

_editor.add_node(node7, -141.25389099121, -463.12936401367)

Blueprint.connect(node6, "zoom", node4, "fovy")
Blueprint.connect(node4, "mat", node1, "vs.projection")
Blueprint.connect(node6, "mat", node1, "vs.view")
Blueprint.connect(node6, "pos", node1, "vs.cam_pos")
Blueprint.connect(node5, "var", node1, "tensor_field")
Blueprint.connect(node7, "tex", node1, "base_tex")
Blueprint.connect(node2, "next", node0, "prev")
Blueprint.connect(node1, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
