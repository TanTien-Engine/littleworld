var node0 = ::geograph::nodes::brush_to_gltf::BrushToGltf()

_editor.add_node(node0, 117.89374624271, -447.3615635722)

var node1 = ::blueprint::nodes::fetch::Fetch()
node1.index = "node0"

_editor.add_node(node1, 392.94665298061, -444.41422180588)

var node2 = ::blueprint::nodes::fetch::Fetch()
node2.index = "va"

_editor.add_node(node2, 618.05559502537, -442.00253665044)

var node3 = ::blueprint::nodes::input::Input()

node3.var_name = "geos"
node3.var_type = "array"

_editor.add_node(node3, 1000.0138585934, 109.41430090309)

var node4 = ::rendergraph::nodes::draw::Draw()

node4.set_prim_type("triangles")
node4.render_state = { "stencil_test" : false, "rasterization" : "fill", "stencil_func" : "always", "stencil_mask" : 255, "cull" : "back", "blend" : false, "stencil_ref" : 0, "depth_test" : true, "depth_func" : "lequal", "clip_plane" : false }
node4.skip = false

_editor.add_node(node4, 860.89351741307, -303.63265940253)

var node5 = ::rendergraph::nodes::shader::Shader()

node5.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexcoord;

out VS_OUT {
    vec3 world_pos;
    mat4 model_mat;
    mat4x2 modelZToClipCoordinates;
} vs_out;

uniform UBO
{
	mat4 model;
	mat4 view;
	mat4 projection;
};

void main()
{
//	vs_out.world_pos = (model * vec4(aPos, 1.0)).xyz;
	vs_out.world_pos = aPos.xyz;
	vs_out.model_mat = model;

	mat4x4 mvp = projection * view * model;
	vs_out.modelZToClipCoordinates = mat4x2(mvp[2], mvp[3]);

    gl_Position = mvp * vec4(aPos, 1.0);
}
"
node5.tcs = ""
node5.tes = ""
node5.gs = ""
node5.fs = "
#version 330 core
out vec4 FragColor;

in VS_OUT {
    vec3 world_pos;
    mat4 model_mat;
    mat4x2 modelZToClipCoordinates;
} fs_in;

uniform UBO
{
	vec3 cam_pos;
	vec3 light_pos;

	vec4 diffuse_specular_ambient_shininess;
};

uniform sampler2D earth_tex;

// from OpenGlobe

struct Intersection
{
    bool  Intersects;
    float NearTime;         // Along ray
    float FarTime;          // Along ray
};

Intersection RayIntersectEllipsoid(vec3 rayOrigin, vec3 rayDirection)
{
	vec3 oneOverEllipsoidRadiiSquared = vec3(1.0);
	vec3 rayOriginSquared = vec3(rayOrigin.x * rayOrigin.x, rayOrigin.y * rayOrigin.y, rayOrigin.z * rayOrigin.z);

    float a = dot(rayDirection * rayDirection, oneOverEllipsoidRadiiSquared);
    float b = 2.0 * dot(rayOrigin * rayDirection, oneOverEllipsoidRadiiSquared);
    float c = dot(rayOriginSquared, oneOverEllipsoidRadiiSquared) - 1.0;
    float discriminant = b * b - 4.0 * a * c;

    if (discriminant < 0.0)
    {
        return Intersection(false, 0.0, 0.0);
    }
    else if (discriminant == 0.0)
    {
        float time = -0.5 * b / a;
        return Intersection(true, time, time);
    }

    float t = -0.5 * (b + (b > 0.0 ? 1.0 : -1.0) * sqrt(discriminant));
    float root1 = t / a;
    float root2 = c / t;

    return Intersection(true, min(root1, root2), max(root1, root2));
}

float ComputeWorldPositionDepth(vec3 position, mat4x2 modelZToClipCoordinates)
{ 
    vec2 v = modelZToClipCoordinates * vec4(position, 1);   // clip coordinates
    v.x /= v.y;                                             // normalized device coordinates
    v.x = (v.x + 1.0) * 0.5;
    return v.x;
}

vec3 GeodeticSurfaceNormal(vec3 positionOnEllipsoid, vec3 oneOverEllipsoidRadiiSquared)
{
    return normalize(positionOnEllipsoid * oneOverEllipsoidRadiiSquared);
}

float LightIntensity(vec3 normal, vec3 toLight, vec3 toEye, vec4 diffuseSpecularAmbientShininess)
{
    vec3 toReflectedLight = reflect(-toLight, normal);

    float diffuse = max(dot(toLight, normal), 0.0);
    float specular = max(dot(toReflectedLight, toEye), 0.0);
    specular = pow(specular, diffuseSpecularAmbientShininess.w);

    return (diffuseSpecularAmbientShininess.x * diffuse) +
           (diffuseSpecularAmbientShininess.y * specular) +
            diffuseSpecularAmbientShininess.z;
}

vec2 ComputeTextureCoordinates(vec3 normal)
{
    return vec2(atan(normal.x, normal.z) / (2 * 3.14159) + 0.5, asin(normal.y) / 3.14159 + 0.5);
}

void main()
{
    vec3 rayDirection = normalize((fs_in.model_mat * vec4(fs_in.world_pos, 1.0)).xyz - cam_pos);
    Intersection i = RayIntersectEllipsoid(cam_pos, rayDirection);

    if (i.Intersects)
    {
        vec3 position = cam_pos + (i.NearTime * rayDirection);
        
        vec3 normal = GeodeticSurfaceNormal(fs_in.world_pos, vec3(1));
        vec2 tex_coord = ComputeTextureCoordinates(normal);
        normal = mat3(fs_in.model_mat) * normal;

        vec3 toLight = normalize(light_pos - position);
        vec3 toEye = normalize(cam_pos - position);
        float intensity = LightIntensity(normal, toLight, toEye, diffuse_specular_ambient_shininess);

        FragColor = vec4(intensity * texture(earth_tex, tex_coord).rgb, 1.0);

        if (false)
        {
            position = cam_pos + (mix(i.NearTime, i.FarTime, 0.5) * rayDirection);
        }

        gl_FragDepth = ComputeWorldPositionDepth(position, fs_in.modelZToClipCoordinates);
    }
    else
    {
        discard;
    }
}

"
node5.cs = ""
node5.render_gen()

_editor.add_node(node5, 684.86402992418, -72.424899630047)

var node6 = ::rendergraph::nodes::clear::Clear()

node6.masks = [ "depth", "color" ]
node6.values = { "color" : [ 0.5, 0.5, 0.5, 1 ] }

_editor.add_node(node6, 996.66028898274, 225.89512574204)

var node7 = ::blueprint::nodes::perspective::Perspective()

node7.fovy = 45
node7.aspect = 0
node7.znear = 0.1
node7.zfar = 100

_editor.add_node(node7, 413.60400748731, -99.260075321102)

var node8 = ::blueprint::nodes::proxy::Proxy()

node8.real_name = "view_cam"
node8.init_real_node(::blueprint::nodes::camera3d::Camera3d())

_editor.add_node(node8, 409.76615286487, 48.85559416076)

var node9 = ::blueprint::nodes::for_each::ForEach()

_editor.add_node(node9, 1164.9441409146, 107.00451606488)

var node10 = ::blueprint::nodes::input::Input()

node10.var_name = "model"
node10.var_type = "mat4"

_editor.add_node(node10, 127.71195983887, 283.94540405273)

var node11 = ::rendergraph::nodes::texture::Texture()
node11.query_param("unif_name").value = "u_tex"
node11.gamma_correction = false
node11.init_texture("../../../textures/globe/NaturalEarth/NE2_50M_SR_W.jpg")

_editor.add_node(node11, 153.81032910156, -26.210243603516)

var node12 = ::blueprint::nodes::number4::Number4()

node12.value.set(0.65, 0.25, 0.1, 12)

_editor.add_node(node12, 180.94563406952, -275.7322081889)

var node13 = ::blueprint::nodes::number2::Number2()

node13.value.set(0.1, 0.1)

_editor.add_node(node13, 407.34296776638, -218.81778773789)

var node14 = ::blueprint::nodes::number2::Number2()

node14.value.set(1, 1)

_editor.add_node(node14, 408.35636077242, -309.61293649693)

var node15 = ::blueprint::nodes::number3::Number3()

node15.value.set(0, 0, 1)

_editor.add_node(node15, 265.46218575074, 169.83702480408)

var node16 = ::blueprint::nodes::multiply::Multiply()

_editor.add_node(node16, 411.66091366943, 163.06332827209)

var node17 = ::blueprint::nodes::integer::Integer()

node17.value = 7

_editor.add_node(node17, 269.57663128426, 83.842234401227)

var node18 = ::blueprint::nodes::number4::Number4()

node18.value.set(0.65, 0.25, 0.1, 12)

_editor.add_node(node18, 408.33280979529, 271.02984059403)

Blueprint.connect(node15, "v3", node16, "a")
Blueprint.connect(node17, "v", node16, "b")
Blueprint.connect(node8, "zoom", node7, "fovy")
Blueprint.connect(node10, "var", node5, "model")
Blueprint.connect(node8, "mat", node5, "view")
Blueprint.connect(node7, "mat", node5, "projection")
Blueprint.connect(node8, "pos", node5, "cam_pos")
Blueprint.connect(node8, "pos", node5, "light_pos")
Blueprint.connect(node18, "v4", node5, "diffuse_specular_ambient_shininess")
Blueprint.connect(node11, "tex", node5, "earth_tex")
Blueprint.connect(node6, "next", node9, "prev")
Blueprint.connect(node3, "var", node9, "in")
Blueprint.connect(node4, "next", node9, "do")
Blueprint.connect(node9, "out", node0, "brush")
Blueprint.connect(node0, "gltf", node1, "items")
Blueprint.connect(node1, "item", node2, "items")
Blueprint.connect(node5, "out", node4, "shader")
Blueprint.connect(node2, "item", node4, "va")
