var node0 = ::rendergraph::nodes::draw::Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "blend" : false, "depth_test" : false, "depth_func" : "less", "cull" : "disable", "clip_plane" : false }
node0.skip = false

_editor.add_node(node0, 261.90909090909, 136.5)

var node1 = ::rendergraph::nodes::clear::Clear()

node1.masks = [ "color", "depth" ]
node1.values = { "color" : [ 255, 255, 255, 255 ] }

_editor.add_node(node1, 43.82090909091, 488.3854545455)

var node2 = ::rendergraph::nodes::shader::Shader()
node2.query_param("inc_dir").value = "../../shaders/atmo/"

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

void main()
{
	gl_Position = vec4(aPos, 1.0);
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = "

#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

uniform UBO
{
	int layer;	
};

void main() 
{
    gl_Position = gl_in[0].gl_Position;
    gl_Layer = layer;
    EmitVertex();
    gl_Position = gl_in[1].gl_Position;
    gl_Layer = layer;
    EmitVertex();
    gl_Position = gl_in[2].gl_Position;
    gl_Layer = layer;
    EmitVertex();
    EndPrimitive();
}
"
node2.fs = "
#version 330 core

#include \"common.glsl\"

out vec4 FragColor;

uniform UBO
{
    float r;
    vec4 dhdH;    
};

uniform sampler3D deltaJSampler;

vec3 integrand(float r, float mu, float muS, float nu, float t) {
    float ri = sqrt(r * r + t * t + 2.0 * r * mu * t);
    float mui = (r * mu + t) / ri;
    float muSi = (nu * t + muS * r) / ri;
    return texture4D(deltaJSampler, ri, mui, muSi, nu).rgb * transmittance(r, mu, t);
}

vec3 inscatter(float r, float mu, float muS, float nu) {
    vec3 raymie = vec3(0.0);
    float dx = limit(r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);
    float xi = 0.0;
    vec3 raymiei = integrand(r, mu, muS, nu, 0.0);
    for (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        vec3 raymiej = integrand(r, mu, muS, nu, xj);
        raymie += (raymiei + raymiej) / 2.0 * dx;
        xi = xj;
        raymiei = raymiej;
    }
    return raymie;
}

void main() {
    float mu, muS, nu;
    getMuMuSNu(r, dhdH, mu, muS, nu);
    FragColor.rgb = inscatter(r, mu, muS, nu);
}

"
node2.cs = ""
node2.render_gen()

_editor.add_node(node2, -133.83000138716, 223.10726162997)

var node3 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node3.type = "quad"
node3.layout = [ "position" ]
node3.shape_params = {  }

_editor.add_node(node3, 42.81818043102, 63.95451216264)

var node4 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node4, 45.54545177113, -106.04548783736)

var node5 = ::rendergraph::nodes::texture::Texture()
node5.query_param("unif_name").value = "deltaS"
node5.gamma_correction = false
node5.init_texture(256, 128, 32, "rgb16f")

_editor.add_node(node5, -351.06272311124, -148.62448228871)

var node6 = ::rendergraph::nodes::pass::Pass()

node6.once = false

_editor.add_node(node6, 410.24724922546, 187.83396770996)

var node7 = ::blueprint::nodes::output::Output()

node7.var_name = "deltaS"
node7.var_type = "texture"

_editor.add_node(node7, -109.5932689098, -166.90494477983)

var node8 = ::blueprint::nodes::input::Input()

node8.var_name = "transmittanceSampler"
node8.var_type = "texture"

_editor.add_node(node8, -314.62962173473, 259.22353322861)

var node9 = ::blueprint::nodes::custom::Custom()

node9.code = "
import \"math\" for Math
import \"maths.vector\" for Vector4

var r_list = []
var dhdH_list = []

var Rg = 6360.0
var Rt = 6420.0
var RL = 6421.0

var RES_R = 32

for (var layer in 0..RES_R) 
{
    var r = layer / (RES_R - 1.0)
    r = r * r

    var tmp = 0.0
    if (layer == RES_R - 1) {
    	tmp = -0.001
    }
    if (layer == 0) {
    	tmp = 0.01
    }
    r = Math.sqrt(Rg * Rg + r * (Rt * Rt - Rg * Rg)) + tmp

    r_list.add(r)

    var dmin = Rt - r
    var dmax = Math.sqrt(r * r - Rg * Rg) + Math.sqrt(Rt * Rt - Rg * Rg)
    var dminp = r - Rg
    var dmaxp = Math.sqrt(r * r - Rg * Rg)
    var dhdH = Vector4(dmin, dmax, dminp, dmaxp)
    dhdH_list.add(dhdH)
}

_editor.script_stack.clear()
_editor.script_stack.add(r_list)
_editor.script_stack.add(dhdH_list)
"
node9.init_ports(0, 2)
node9.use_cache = false

_editor.add_node(node9, -733.51446284544, 425.5519837015)

var node10 = ::blueprint::nodes::fetch::Fetch()

_editor.add_node(node10, -544.18202485646, 396.45350549888)

var node11 = ::rendergraph::nodes::pass::Pass()

node11.once = true

_editor.add_node(node11, 699.15576537917, -97.704650014042)

var node12 = ::blueprint::nodes::loop::Loop()

node12.start = 0
node12.end = 32

_editor.add_node(node12, 504.99423839997, -116.98412097707)

var node13 = ::blueprint::nodes::print::Print()

_editor.add_node(node13, -268.63485162908, 491.04168146307)

var node14 = ::blueprint::nodes::fetch::Fetch()

_editor.add_node(node14, -541.73240802701, 286.06246868445)

var node15 = ::blueprint::nodes::input::Input()

node15.var_name = "deltaJSampler"
node15.var_type = "texture"

_editor.add_node(node15, -314.96481600675, 187.15613902699)

Blueprint.connect(node6, "next", node12, "do")
Blueprint.connect(node12, "next", node11, "do")
Blueprint.connect(node9, "out1", node14, "items")
Blueprint.connect(node12, "index", node14, "index")
Blueprint.connect(node9, "out0", node10, "items")
Blueprint.connect(node12, "index", node10, "index")
Blueprint.connect(node9, "next", node1, "prev")
Blueprint.connect(node12, "index", node2, "layer")
Blueprint.connect(node10, "item", node2, "r")
Blueprint.connect(node14, "item", node2, "dhdH")
Blueprint.connect(node8, "var", node2, "transmittanceSampler")
Blueprint.connect(node15, "var", node2, "deltaJSampler")
Blueprint.connect(node0, "next", node6, "do")
Blueprint.connect(node4, "fbo", node6, "fbo")
Blueprint.connect(node5, "tex", node7, "var")
Blueprint.connect(node5, "tex", node4, "col0")
Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
