var node0 = ::rendergraph::nodes::draw::Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "blend" : false, "depth_test" : false, "depth_func" : "less", "cull" : "disable", "clip_plane" : false }
node0.skip = false

_editor.add_node(node0, 261.90909090909, 136.5)

var node1 = ::rendergraph::nodes::shader::Shader()
node1.query_param("inc_dir").value = "../../shaders/atmo/"

node1.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

void main()
{
	gl_Position = vec4(aPos, 1.0);
}
"
node1.tcs = ""
node1.tes = ""
node1.gs = "

#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

uniform UBO
{
	int layer;	
};

void main() 
{
    gl_Position = gl_in[0].gl_Position;
    gl_Layer = layer;
    EmitVertex();
    gl_Position = gl_in[1].gl_Position;
    gl_Layer = layer;
    EmitVertex();
    gl_Position = gl_in[2].gl_Position;
    gl_Layer = layer;
    EmitVertex();
    EndPrimitive();
}
"
node1.fs = "
#version 330 core

#include \"common.glsl\"

uniform UBO
{
	float r;
	vec4 dhdH;
};

layout (location = 0) out vec4 frag_ray;
layout (location = 1) out vec4 frag_mie;

out vec4 FragColor;

void integrand(float r, float mu, float muS, float nu, float t, out vec3 ray, out vec3 mie) {
    ray = vec3(0.0);
    mie = vec3(0.0);
    float ri = sqrt(r * r + t * t + 2.0 * r * mu * t);
    float muSi = (nu * t + muS * r) / ri;
    ri = max(Rg, ri);
    if (muSi >= -sqrt(1.0 - Rg * Rg / (ri * ri))) {
        vec3 ti = transmittance(r, mu, t) * transmittance(ri, muSi);
        ray = exp(-(ri - Rg) / HR) * ti;
        mie = exp(-(ri - Rg) / HM) * ti;
    }
}

void inscatter(float r, float mu, float muS, float nu, out vec3 ray, out vec3 mie) {
    ray = vec3(0.0);
    mie = vec3(0.0);
    float dx = limit(r, mu) / float(INSCATTER_INTEGRAL_SAMPLES);
    float xi = 0.0;
    vec3 rayi;
    vec3 miei;
    integrand(r, mu, muS, nu, 0.0, rayi, miei);
    for (int i = 1; i <= INSCATTER_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        vec3 rayj;
        vec3 miej;
        integrand(r, mu, muS, nu, xj, rayj, miej);
        ray += (rayi + rayj) / 2.0 * dx;
        mie += (miei + miej) / 2.0 * dx;
        xi = xj;
        rayi = rayj;
        miei = miej;
    }
    ray *= betaR;
    mie *= betaMSca;
}

void main() {
    vec3 ray;
    vec3 mie;
    float mu, muS, nu;
    getMuMuSNu(r, dhdH, mu, muS, nu);
    inscatter(r, mu, muS, nu, ray, mie);
    // store separately Rayleigh and Mie contributions, WITHOUT the phase function factor
    frag_ray.rgb = ray;
    frag_mie.rgb = mie;
}

"
node1.cs = ""
node1.render_gen()

_editor.add_node(node1, -133.83000138716, 223.10726162997)

var node2 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node2.type = "quad"
node2.layout = [ "position" ]
node2.shape_params = {  }

_editor.add_node(node2, 42.81818043102, 63.95451216264)

var node3 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node3, 45.54545177113, -106.04548783736)

var node4 = ::rendergraph::nodes::texture::Texture()
node4.query_param("unif_name").value = "deltaSR"
node4.gamma_correction = false
node4.init_texture(256, 128, 32, "rgb16f")

_editor.add_node(node4, -364.37272311124, -3.5454822887099)

var node5 = ::rendergraph::nodes::pass::Pass()

node5.once = false

_editor.add_node(node5, 410.24724922546, 187.83396770996)

var node6 = ::blueprint::nodes::output::Output()

node6.var_name = "deltaSR"
node6.var_type = "texture"

_editor.add_node(node6, -97.6142689098, -104.34794477983)

var node7 = ::blueprint::nodes::input::Input()

node7.var_name = "transmittanceSampler"
node7.var_type = "texture"

_editor.add_node(node7, -347.22314800902, 230.94609316304)

var node8 = ::rendergraph::nodes::texture::Texture()
node8.query_param("unif_name").value = "deltaSM"
node8.gamma_correction = false
node8.init_texture(256, 128, 32, "rgb16f")

_editor.add_node(node8, -372.17084716083, -250.53605055317)

var node9 = ::blueprint::nodes::output::Output()

node9.var_name = "deltaSM"
node9.var_type = "texture"

_editor.add_node(node9, -97.311483868478, -246.8894221352)

var node10 = ::blueprint::nodes::custom::Custom()

node10.code = "
import \"math\" for Math
import \"maths.vector\" for Vector4

var r_list = []
var dhdH_list = []

var Rg = 6360.0
var Rt = 6420.0
var RL = 6421.0

var RES_R = 32

for (var layer in 0..RES_R) 
{
    var r = layer / (RES_R - 1.0)
    r = r * r

    var tmp = 0.0
    if (layer == RES_R - 1) {
    	tmp = -0.001
    }
    if (layer == 0) {
    	tmp = 0.01
    }
    r = Math.sqrt(Rg * Rg + r * (Rt * Rt - Rg * Rg)) + tmp

    r_list.add(r)

    var dmin = Rt - r
    var dmax = Math.sqrt(r * r - Rg * Rg) + Math.sqrt(Rt * Rt - Rg * Rg)
    var dminp = r - Rg
    var dmaxp = Math.sqrt(r * r - Rg * Rg)
    var dhdH = Vector4(dmin, dmax, dminp, dmaxp)
    dhdH_list.add(dhdH)
}

_editor.script_stack.clear()
_editor.script_stack.add(r_list)
_editor.script_stack.add(dhdH_list)
"
node10.init_ports(0, 2)
node10.use_cache = false

_editor.add_node(node10, -733.51446284544, 425.5519837015)

var node11 = ::blueprint::nodes::fetch::Fetch()

_editor.add_node(node11, -544.18202485646, 396.45350549888)

var node12 = ::rendergraph::nodes::pass::Pass()

node12.once = true

_editor.add_node(node12, 699.15576537917, -97.704650014042)

var node13 = ::blueprint::nodes::loop::Loop()

node13.start = 0
node13.end = 32

_editor.add_node(node13, 504.99423839997, -116.98412097707)

var node14 = ::blueprint::nodes::print::Print()

_editor.add_node(node14, -268.63485162908, 491.04168146307)

var node15 = ::blueprint::nodes::fetch::Fetch()

_editor.add_node(node15, -541.73240802701, 286.06246868445)

Blueprint.connect(node5, "next", node13, "do")
Blueprint.connect(node13, "next", node12, "do")
Blueprint.connect(node10, "out1", node15, "items")
Blueprint.connect(node13, "index", node15, "index")
Blueprint.connect(node10, "out0", node11, "items")
Blueprint.connect(node13, "index", node11, "index")
Blueprint.connect(node8, "tex", node9, "var")
Blueprint.connect(node13, "index", node1, "layer")
Blueprint.connect(node11, "item", node1, "r")
Blueprint.connect(node15, "item", node1, "dhdH")
Blueprint.connect(node7, "var", node1, "transmittanceSampler")
Blueprint.connect(node0, "next", node5, "do")
Blueprint.connect(node3, "fbo", node5, "fbo")
Blueprint.connect(node4, "tex", node6, "var")
Blueprint.connect(node4, "tex", node3, "col0")
Blueprint.connect(node8, "tex", node3, "col1")
Blueprint.connect(node10, "next", node0, "prev")
Blueprint.connect(node1, "out", node0, "shader")
Blueprint.connect(node2, "out", node0, "va")
