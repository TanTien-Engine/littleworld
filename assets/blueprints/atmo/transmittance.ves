var node0 = ::rendergraph::nodes::draw::Draw()

node0.set_prim_type("tri_strip")
node0.render_state = { "blend" : false, "depth_test" : false, "depth_func" : "less", "cull" : "disable", "clip_plane" : false }
node0.skip = false

_editor.add_node(node0, 261.90909090909, 136.5)

var node1 = ::rendergraph::nodes::clear::Clear()

node1.masks = [ "color", "depth" ]
node1.values = { "color" : [ 255, 255, 255, 255 ] }

_editor.add_node(node1, 28.09090909091, 302.0454545455)

var node2 = ::rendergraph::nodes::shader::Shader()
node2.query_param("inc_dir").value = "../../shaders/atmo/"

node2.vs = "
#version 330 core
layout (location = 0) in vec3 aPos;

void main()
{
	gl_Position = vec4(aPos, 1.0);
}
"
node2.tcs = ""
node2.tes = ""
node2.gs = ""
node2.fs = "
#version 330 core

#include \"common.glsl\"

out vec4 FragColor;

float opticalDepth(float H, float r, float mu) {
    float result = 0.0;
    float dx = limit(r, mu) / float(TRANSMITTANCE_INTEGRAL_SAMPLES);
    float xi = 0.0;
    float yi = exp(-(r - Rg) / H);
    for (int i = 1; i <= TRANSMITTANCE_INTEGRAL_SAMPLES; ++i) {
        float xj = float(i) * dx;
        float yj = exp(-(sqrt(r * r + xj * xj + 2.0 * xj * r * mu) - Rg) / H);
        result += (yi + yj) / 2.0 * dx;
        xi = xj;
        yi = yj;
    }
    return mu < -sqrt(1.0 - (Rg / r) * (Rg / r)) ? 1e9 : result;
}

void main() 
{
    float r, muS;
    getTransmittanceRMu(r, muS);
    vec3 depth = betaR * opticalDepth(HR, r, muS) + betaMEx * opticalDepth(HM, r, muS);
    FragColor = vec4(exp(-depth), 0.0); // Eq (5)
}

"
node2.cs = ""
node2.render_gen()

_editor.add_node(node2, 14.99999861284, 189.22726162997)

var node3 = ::rendergraph::nodes::primitive_shape::PrimitiveShape()

node3.type = "quad"
node3.layout = [ "position" ]
node3.shape_params = {  }

_editor.add_node(node3, 36.81818043102, 81.95451216264)

var node4 = ::rendergraph::nodes::render_target::RenderTarget()

_editor.add_node(node4, 39.54545177113, -88.04548783736)

var node5 = ::rendergraph::nodes::texture::Texture()
node5.query_param("unif_name").value = "transmittance"
node5.gamma_correction = false
node5.init_texture(256, 64, "rgb16f")

_editor.add_node(node5, -292.27272311124, -68.04548228871)

var node6 = ::rendergraph::nodes::pass::Pass()

node6.once = true

_editor.add_node(node6, 410.24724922546, 187.83396770996)

var node7 = ::blueprint::nodes::output::Output()

node7.var_name = "transmittance"
node7.var_type = "texture"

_editor.add_node(node7, -103.6142689098, -86.34794477983)

Blueprint.connect(node0, "next", node6, "do")
Blueprint.connect(node4, "fbo", node6, "fbo")
Blueprint.connect(node5, "tex", node7, "var")
Blueprint.connect(node5, "tex", node4, "col0")
Blueprint.connect(node1, "next", node0, "prev")
Blueprint.connect(node2, "out", node0, "shader")
Blueprint.connect(node3, "out", node0, "va")
