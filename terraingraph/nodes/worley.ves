import "blueprint.node" for Node
import "blueprint.node_function" for NodeFunction
import "maths.vector" for Vector2

var CODE = "
uniform __UBO__
{
	vec2 offset;
	float seed;

	float frequency;

	float manhattan_scale;

	// euclidean, manhattan, chebyshev
	int dist_op;
	// f1, f2, f1 + f2, f2 - f1, f1 * f2, f1 / f2
	int features_mode;	
};

vec2 random2(vec2 p)
{
    return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);
}

float euclidean_dist(vec2 diff)
{
    return diff.x * diff.x + diff.y * diff.y;
}

float manhattan_dist(vec2 diff)
{
    return manhattan_scale * (abs(diff.x) + abs(diff.y));
}

float chebyshev_dist(vec2 diff)
{
    float dx = abs(diff.x);
    float dy = abs(diff.y);
    return max(dx, dy);
}

float calc_grid(vec2 st)
{
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);

    float f1 = 1., f2 = 1.;

    for (int y = -1; y <= 1; y++) {
        for (int x = -1; x <= 1; x++) {
            vec2 neighbor = vec2(float(x),float(y));

            vec2 point = random2(i_st + neighbor);
            point = 0.5 + 0.5*sin(seed + 6.2831 * point);

            vec2 diff = neighbor + point - f_st;
            float dist = 0;
            if (dist_op == 0) {
                dist = euclidean_dist(diff);
            } else if (dist_op == 1) {
                dist = manhattan_dist(diff);
            } else if (dist_op == 2) {
                dist = chebyshev_dist(diff);
            }

            if (dist < f1) {
                f2 = f1;
                f1 = dist;
            } else if (dist > f1 && dist < f2) {
                f2 = dist;
            }
        }
    }

    if (features_mode == 0) {
        return f1;
    } else if (features_mode == 1) {
        return f2;
    } else if (features_mode == 2) {
        return f1 + f2;
    } else if (features_mode == 3) {
        return f2 - f1;
    } else if (features_mode == 4) {
        return f1 * f2;
    } else if (features_mode == 5) {
        return f1 / f2;
    } else {
        return 0;
    }

    //// debug draw
    //float color = 0;
    //color += min_dist;                                  // Draw the min distance (distance field)
    //color += 1.-step(.001, min_dist);                   // Draw cell center
    //color += step(.98, f_st.x) + step(.98, f_st.y);     // Draw grid
    //return color;
}

float worley(vec2 tex_coords)
{
    vec2 st = (tex_coords + offset) * frequency;
    float v = calc_grid(st);
    return clamp(v, 0.0, 1.0);
}
"

class Worley is Node
{
	init() 
	{
		super.init()
	
		this.layout()

		this.node_func = NodeFunction(this, "compute", CODE, "glsl", "worley", [
			[ "offset", Vector2(0, 0) ],
			[ "seed", 0.0 ],
			[ "frequency", 4.0 ],
			[ "manhattan_scale", 0.1 ],
			[ "dist_op", 0, { "integer" : true, "min" : 0, "max" : 2 } ],
			[ "features_mode", 0, { "integer" : true, "min" : 0, "max" : 5 } ],
		])
	}
}