import "blueprint.node" for Node
import "terraingraph.node_helper" for NodeHelper
import "terraingraph.style" for HEIGHTFIELD_SIZE
import "terraingraph.heightfield_proxy" for HeightfieldProxy
import "terraingraph.variant" for VAR_TYPE_HEIGHTFIELD, VarHeightfield
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NODE, VAR_TYPE_NUMBER, VAR_TYPE_NUMBER2
import "blueprint.field_proxy" for FieldProxy
import "image" for ImageData
import "render" for Texture2D, Render
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "blueprint.blueprint" for Blueprint
import "rendergraph.nodes.shader" for Shader
import "rendergraph.nodes.compute" for Compute
import "rendergraph.nodes.texture" for Texture
import "rendergraph.drawlist" for Drawlist
import "maths.vector" for Vector2

var DARWLIST = nil
var SHADER   = nil
var COMPUTE  = nil

var CS = "
#version 430

#define LOCAL_SIZE 32

layout(local_size_x = LOCAL_SIZE, local_size_y = LOCAL_SIZE, local_size_z = 1) in;

layout(binding = 0, r16f) writeonly uniform image2D out_tex;

uniform sampler2D in_tex;
uniform sampler2D brush_tex;

uniform UBO
{
	vec2 brush_pos;
	float radius;
	float force;	
};

void main()
{
	ivec2 pos = ivec2(gl_GlobalInvocationID.xy);

    vec4 base = texelFetch(in_tex, pos, 0);

    const vec2 tex_coord = pos / float(textureSize(in_tex, 0));
    float dist = distance(tex_coord, brush_pos * 0.5 + 0.5);
    float r = radius * 0.5;
    if (dist < r) 
    {
        float blend = pow(1.0 - dist / r, 2.0);
        vec2 uv = pos / float(textureSize(brush_tex, 0));
        base.r += blend * force * texture(brush_tex, uv).r;
    }

    imageStore(out_tex, pos, base);
}
"	

class Brush is Node
{
	init() 
	{
		super.init()
	
		this.imports = [
			Pin(this, "in", VAR_TYPE_HEIGHTFIELD),
			Pin(this, "cam", VAR_TYPE_NODE),
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_HEIGHTFIELD),
			Pin(this, "pos", VAR_TYPE_NUMBER2),
			Pin(this, "raduis", VAR_TYPE_NUMBER),
		]

		this.layout()

		this.radius = 0.1
		this.force = 0.1

		this.curr_pos = Vector2(0, 0)

		this.added_pos = []
		this.history = []

		this.default_brush_tex = nil

		this.hf = VarHeightfield()
	}

	calc_value(idx)
	{
		if (idx == 0) {
			return Variant(VAR_TYPE_HEIGHTFIELD, this.hf)
		} else if (idx == 1) {
			return Variant(VAR_TYPE_NUMBER2, this.curr_pos)
		} else if (idx == 2) {
			return Variant(VAR_TYPE_NUMBER, this.radius)		
		}

		return nil
	}

	render_gen()
	{
		if (SHADER) {
			SHADER.render_gen()
		}
		if (COMPUTE) {
			COMPUTE.render_gen()
		}
	}

	render_run()
	{
		if (!this.hf.tex) {
			this.hf.tex = Texture2D.init(HEIGHTFIELD_SIZE, HEIGHTFIELD_SIZE, "r16f")
		}
		if (!DARWLIST) 
		{
			var shader = Shader()
			shader.cs = CS
			shader.render_gen()

			var compute = Compute()
			compute.num_groups = [ HEIGHTFIELD_SIZE / 32, HEIGHTFIELD_SIZE / 32, 1 ]

			Blueprint.connect(shader, "out", compute, "shader")

			DARWLIST = Drawlist([compute])

			SHADER = shader
			COMPUTE = compute
		}
		if (!this.default_brush_tex) 
		{
			this.default_brush_tex = Texture2D.init(1, 1, "r16f")
			this.default_brush_tex.upload([0.9], 0, 0, 1, 1)
		}
		if (!this.history.isEmpty)
		{
			this.load_history(this.history)
			this.history.clear()
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 2
	}
	
	to_string(name) 
	{
		if (!this.history.isEmpty) {
			for (var p in this.history) {
				this.added_pos.add(p)
			}
		}

		var pos_str = ""
		for (var p in this.added_pos) {
			pos_str = pos_str + "[%(p.x), %(p.y)],"
		}
		return "
%(name).radius = %(this.radius)
%(name).force = %(this.force)
%(name).history = %(this.added_pos)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var radius = GUI.slider(ctx, "radius", this.radius, x, y, this.style.width - 20, 0.2, false)
		if (radius != this.radius) {
			this.radius = radius
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var force = GUI.slider(ctx, "force", this.force, x, y, this.style.width - 20, 1, false)
		if (force != this.force) {
			this.force = force
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		if (dirty) {
			NodeHelper.make_node_dirty(this)
		}

		return dirty
	}

	on_mouse_pressed(x, y, btn) 
	{
		this.update_brush_pos(x, y)
		this.brush()
	}

	on_mouse_moved(x, y, btn) 
	{
		this.update_brush_pos(x, y)
	}

	on_mouse_dragged(x, y, btn) 
	{
		this.update_brush_pos(x, y)
		this.brush()
	}

	bind(shader)
	{
		var out_tex = HeightfieldProxy(Blueprint.query_pin(this.exports, "out"))
		Blueprint.connect(out_tex, "tex", shader, "out_tex")

		var in_tex = HeightfieldProxy(Blueprint.query_pin(this.exports, "out"))
		Blueprint.connect(in_tex, "tex", shader, "in_tex")

		var brush_tex_pin = Blueprint.get_input_pin(this.imports, "in")
		if (brush_tex_pin) {
			var node = HeightfieldProxy(brush_tex_pin)
			Blueprint.connect(node, "tex", shader, "brush_tex")
		} else {
			var node = Texture()
			node.tex = this.default_brush_tex
			Blueprint.connect(node, "tex", shader, "brush_tex")		
		}

		var pos = FieldProxy(this, "curr_pos")
		Blueprint.connect(pos, "out", shader, "brush_pos")

		var radius = FieldProxy(this, "radius")
		Blueprint.connect(radius, "out", shader, "radius")

		var force = FieldProxy(this, "force")
		Blueprint.connect(force, "out", shader, "force")
	}

	update_brush_pos(x, y)
	{
		var v_cam = Blueprint.calc_input_value(this, "cam")
		if (!v_cam or !v_cam.value) {
			return
		}

		var cam = v_cam.value.cam
		var pos = cam.screen2world(Vector2(x, y), cam.zoom)

		this.curr_pos.x = pos.x
		this.curr_pos.y = pos.z
	}	

	brush()
	{
		this.added_pos.add(Vector2(this.curr_pos.x, this.curr_pos.y))

		COMPUTE.need_rebuild = true
		this.bind(SHADER)
		DARWLIST.run()

		NodeHelper.make_node_dirty(this)
	}

	load_history(pos_list)
	{
		for (var p in pos_list) 
		{
			this.curr_pos.x = p[0]
			this.curr_pos.y = p[1]
			this.brush()
		}	
	}
}