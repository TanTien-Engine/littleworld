import "blueprint.node" for Node
import "terraingraph.node_helper" for NodeHelper
import "terraingraph.style" for HEIGHTFIELD_SIZE
import "terraingraph.heightfield_proxy" for HeightfieldProxy
import "terraingraph.variant" for VAR_TYPE_HEIGHTFIELD, VarHeightfield
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.nodes.number" for Number
import "blueprint.field_proxy" for FieldProxy
import "image" for ImageData
import "render" for Texture2D, Render, ComputeBuffer
import "blueprint.node_layout" for DEFAULT_HEIGHT
import "gui" for GUI
import "blueprint.blueprint" for Blueprint
import "rendergraph.nodes.shader" for Shader
import "rendergraph.nodes.compute" for Compute
import "rendergraph.drawlist" for Drawlist
import "random" for Random
import "math" for Math

var DARWLIST = nil
var SHADER   = nil
var COMPUTE  = nil

var CS = "
#version 430

layout(std430, binding=0) coherent buffer HeightfieldDataFloat { float heights[]; };
layout(std430, binding=1) buffer RandomIndicesInt { int random_indices[]; };
layout(std430, binding=2) buffer BrushIndicesInt { int brush_indices[]; };
layout(std430, binding=3) buffer BrushWeightsFloat { float brush_weights[]; };

layout(std140) uniform UBO
{
    int map_size;
    int brush_length;
    int border_size;

    int max_lifetime;
    float inertia;
    float sediment_capacity_factor;
    float min_sediment_cap;
    float deposit_spd;
    float erode_spd;

    float evaporate_spd;
    float gravity;
    float start_speed;
    float start_water;
};

vec3 CalculateHeightAndGradient(float pos_x, float pos_y)
{
    int coord_x = int(pos_x);
    int coord_y = int(pos_y);

    // Calculate droplet's offset inside the cell (0,0) = at NW node, (1,1) = at SE node
    float x = pos_x - coord_x;
    float y = pos_y - coord_y;

    // Calculate heights of the four nodes of the droplet's cell
    int node_idx_nw = coord_y * map_size + coord_x;
    float height_nw = heights[node_idx_nw];
    float height_ne = heights[node_idx_nw + 1];
    float height_sw = heights[node_idx_nw + map_size];
    float height_se = heights[node_idx_nw + map_size + 1];

    // Calculate droplet's direction of flow with bilinear interpolation of height difference along the edges
    float gradient_x = (height_ne - height_nw) * (1 - y) + (height_se - height_sw) * y;
    float gradient_y = (height_sw - height_nw) * (1 - x) + (height_se - height_ne) * x;

    // Calculate height with bilinear interpolation of the heights of the nodes of the cell
    float height = height_nw * (1 - x) * (1 - y) + height_ne * x * (1 - y) + height_sw * (1 - x) * y + height_se * x * y;

    return vec3(gradient_x, gradient_y, height);
}

layout(local_size_x = 1024) in;
void main()
{
    int index = random_indices[gl_GlobalInvocationID.x];
    float pos_x = float(index \% map_size);
    float pos_y = float(index / map_size);
    float dir_x = 0;
    float dir_y = 0;
    float speed = start_speed;
    float water = start_water;
    float sediment = 0;

    for (int lifetime = 0; lifetime < max_lifetime; lifetime ++) {
        int node_x = int(pos_x);
        int node_y = int(pos_y);
        int droplet_index = node_y * map_size + node_x;

        // Calculate droplet's offset inside the cell (0,0) = at NW node, (1,1) = at SE node
        float cell_offset_x = pos_x - node_x;
        float cell_offset_y = pos_y - node_y;

        // Calculate droplet's height and direction of flow with bilinear interpolation of surrounding heights
        vec3 height_and_gradient = CalculateHeightAndGradient (pos_x, pos_y);

        // Update the droplet's direction and position (move position 1 unit regardless of speed)
        dir_x = (dir_x * inertia - height_and_gradient.x * (1 - inertia));
        dir_y = (dir_y * inertia - height_and_gradient.y * (1 - inertia));
        // Normalize direction
        float len = max(0.01, sqrt(dir_x * dir_x + dir_y * dir_y));
        dir_x /= len;
        dir_y /= len;
        pos_x += dir_x;
        pos_y += dir_y;

        // Stop simulating droplet if it's not moving or has flowed over edge of heights
        if ((dir_x == 0 && dir_y == 0) || pos_x < border_size || pos_x > map_size - border_size || pos_y < border_size || pos_y > map_size - border_size) {
            break;
        }

        // Find the droplet's new height and calculate the dh
        float new_h = CalculateHeightAndGradient (pos_x, pos_y).z;
        float dh = new_h - height_and_gradient.z;

        // Calculate the droplet's sediment capacity (higher when moving fast down a slope and contains lots of water)
        float sediment_cap = max(-dh * speed * water * sediment_capacity_factor, min_sediment_cap);

        // If carrying more sediment than capacity, or if flowing uphill:
        if (sediment > sediment_cap || dh > 0) 
        {
            // If moving uphill (dh > 0) try fill up to the current height, otherwise deposit a fraction of the excess sediment
            float amount_to_deposit = (dh > 0) ? min(dh, sediment) : (sediment - sediment_cap) * deposit_spd;
            sediment -= amount_to_deposit;

            // Add the sediment to the four nodes of the current cell using bilinear interpolation
            // Deposition is not distributed over a radius (like erosion) so that it can fill small pits
            heights[droplet_index] += amount_to_deposit * (1 - cell_offset_x) * (1 - cell_offset_y);
            heights[droplet_index + 1] += amount_to_deposit * cell_offset_x * (1 - cell_offset_y);
            heights[droplet_index + map_size] += amount_to_deposit * (1 - cell_offset_x) * cell_offset_y;
            heights[droplet_index + map_size + 1] += amount_to_deposit * cell_offset_x * cell_offset_y;
        }
        else 
        {
            // Erode a fraction of the droplet's current carry capacity.
            // Clamp the erosion to the change in height so that it doesn't dig a hole in the terrain behind the droplet
            float amount_to_erode = min ((sediment_cap - sediment) * erode_spd, -dh);

            for (int i = 0; i < brush_length; i ++) {
                int erode_idx = droplet_index + brush_indices[i];

                float weighted_erode_amount = amount_to_erode * brush_weights[i];
                float delta_sediment = (heights[erode_idx] < weighted_erode_amount) ? heights[erode_idx] : weighted_erode_amount;
                heights[erode_idx] -= delta_sediment;
                sediment += delta_sediment;
            }
        }

        // Update droplet's speed and water content
        speed = sqrt(max(0, speed * speed + dh * gravity));
        water *= (1 - evaporate_spd);
    }
}
"	

class Erosion is Node
{
	init() 
	{
		super.init()
	
		this.imports = [
			Pin(this, "in", VAR_TYPE_HEIGHTFIELD)
		]
		this.exports = [
			Pin(this, "out", VAR_TYPE_HEIGHTFIELD)
		]

		this.layout()

		this.iter = 200000
		this.radius = 2

		this.kq = 4
		this.min_slope = 0.013
		this.kw = 0.01
		this.kr = 0.008
		this.kd = 0.3
		this.ki = 0.76
		this.g = 4

		this.hf = VarHeightfield()

		this.random = Random.init(12345)

		this.iter_dirty = true

		this.heights_buf = nil
	}

	calc_value(idx)
	{
		return Variant(VAR_TYPE_HEIGHTFIELD, this.hf)
	}

	render_gen()
	{
		this.need_rebuild = true

		if (SHADER) {
			SHADER.render_gen()
		}
		if (COMPUTE) {
			COMPUTE.render_gen()
		}
	}
	
	render_run()
	{
		if (!this.hf.tex) {
			this.hf.tex = Texture2D.init(HEIGHTFIELD_SIZE, HEIGHTFIELD_SIZE, "r16f")
		}
		if (!DARWLIST) 
		{
			var shader = Shader()
			shader.cs = CS
			shader.render_gen()

			var compute = Compute()
			Blueprint.connect(shader, "out", compute, "shader")

			DARWLIST = Drawlist([compute])

			SHADER = shader
			COMPUTE = compute
		}

		if (this.need_rebuild) 
		{
			COMPUTE.num_groups = [ this.iter / 1024, 1, 1 ]

			COMPUTE.need_rebuild = true

			this.setup_buffers()
			this.bind(SHADER)
			DARWLIST.run()
			this.get_result()

			this.need_rebuild = false
		}
	}

	layout() 
	{
		super.layout()

		this.style.height = this.style.height + DEFAULT_HEIGHT * 9
	}
	
	to_string(name) {
		return "
%(name).iter = %(this.iter)
%(name).radius = %(this.radius)
%(name).kq = %(this.kq)
%(name).min_slope = %(this.min_slope)
%(name).kw = %(this.kw)
%(name).kr = %(this.kr)
%(name).kd = %(this.kd)
%(name).ki = %(this.ki)
%(name).g = %(this.g)
"
	}

	draw_gui(ctx) 
	{
		var dirty = false

		var x = this.pos.x - this.style.width * 0.5
		var y = this.pos.y + this.style.height * 0.5 - this.calc_panel_height() - DEFAULT_HEIGHT

		var iter = Math.floor(GUI.slider(ctx, "iter", this.iter, x, y, this.style.width - 20, 1000000, false))
		if (iter != this.iter) {
			this.iter = iter
			this.iter_dirty = true
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var radius = GUI.slider(ctx, "radius", this.radius, x, y, this.style.width - 20, 10, false)
		if (radius != this.radius) {
			this.radius = radius
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var kq = GUI.slider(ctx, "kq", this.kq, x, y, this.style.width - 20, 10, false)
		if (kq != this.kq) {
			this.kq = kq
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var min_slope = GUI.slider(ctx, "min_slope", this.min_slope, x, y, this.style.width - 20, 0.02, false)
		if (min_slope != this.min_slope) {
			this.min_slope = min_slope
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var kw = GUI.slider(ctx, "kw", this.kw, x, y, this.style.width - 20, 0.1, false)
		if (kw != this.kw) {
			this.kw = kw
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var kr = GUI.slider(ctx, "kr", this.kr, x, y, this.style.width - 20, 0.02, false)
		if (kr != this.kr) {
			this.kr = kr
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var kd = GUI.slider(ctx, "kd", this.kd, x, y, this.style.width - 20, 1, false)
		if (kd != this.kd) {
			this.kd = kd
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var ki = GUI.slider(ctx, "ki", this.ki, x, y, this.style.width - 20, 1, false)
		if (ki != this.ki) {
			this.ki = ki
			dirty = true
		}
		y = y - DEFAULT_HEIGHT

		var g = GUI.slider(ctx, "g", this.g, x, y, this.style.width - 20, 10, false)
		if (g != this.g) {
			this.g = g
			dirty = true
		}
		y = y - DEFAULT_HEIGHT
														
		if (dirty) {
			NodeHelper.make_node_dirty(this)
		}

		return dirty
	}

	bind(shader)
	{
		var border_size = Number()
		border_size.value = 0
		Blueprint.connect(border_size, "v", shader, "border_size")

		var map_size = Number()
		map_size.value = HEIGHTFIELD_SIZE
		Blueprint.connect(map_size, "v", shader, "map_size")

		var brush_length = FieldProxy(this, "brush_length")
		Blueprint.connect(brush_length, "out", shader, "brush_length")

		var max_lifetime = Number()
		max_lifetime.value = 30
		Blueprint.connect(max_lifetime, "v", shader, "max_lifetime")

		var inertia = FieldProxy(this, "ki")
		Blueprint.connect(inertia, "out", shader, "inertia")

		var sediment_capacity_factor = FieldProxy(this, "kq")
		Blueprint.connect(sediment_capacity_factor, "out", shader, "sediment_capacity_factor")

		var min_sediment_cap = FieldProxy(this, "min_slope")
		Blueprint.connect(min_sediment_cap, "out", shader, "min_sediment_cap")

		var deposit_spd = FieldProxy(this, "kd")
		Blueprint.connect(deposit_spd, "out", shader, "deposit_spd")

		var erode_spd = FieldProxy(this, "kr")
		Blueprint.connect(erode_spd, "out", shader, "erode_spd")

		var evaporate_spd = FieldProxy(this, "kw")
		Blueprint.connect(evaporate_spd, "out", shader, "evaporate_spd")

		var gravity = FieldProxy(this, "g")
		Blueprint.connect(gravity, "out", shader, "gravity")

		var start_speed = Number()
		start_speed.value = 1.0
		Blueprint.connect(start_speed, "v", shader, "start_speed")

		var start_water = Number()
		start_water.value = 1.0
		Blueprint.connect(start_water, "v", shader, "start_water")
	}

	setup_buffers()
	{
		// heights buffer
		var hf = Blueprint.calc_input_value(this, 0)
		if (hf and hf.value and hf.value.tex)
		{
			var height_img = ImageData.init(HEIGHTFIELD_SIZE, HEIGHTFIELD_SIZE, "r16f")
			hf.value.tex.download(height_img)
			var heights = []
			for (var y in 0..HEIGHTFIELD_SIZE) {
				for (var x in 0..HEIGHTFIELD_SIZE) {
					heights.add(height_img.get_pixel(x, y))
				}
			}
			this.heights_buf = ComputeBuffer.init("float", heights, 0)
			this.hf.tex.upload(heights, 0, 0, HEIGHTFIELD_SIZE, HEIGHTFIELD_SIZE)			
		}

		// Create brush
		var brush_index_offsets = []
		var brush_weights = []
	    var weight_sum = 0
	    var erosion_brush_radius = 3
	    var map_size = HEIGHTFIELD_SIZE
	    for (var brush_y = -erosion_brush_radius; brush_y <= erosion_brush_radius; brush_y = brush_y + 1) {
	        for (var brush_x = -erosion_brush_radius; brush_x <= erosion_brush_radius; brush_x = brush_x + 1) {
	            var sqr_dst = brush_x * brush_x + brush_y * brush_y
	            if (sqr_dst < erosion_brush_radius * erosion_brush_radius) {
	                brush_index_offsets.add(brush_y * map_size + brush_x)
	                var brush_weight = 1 - Math.sqrt(sqr_dst) / erosion_brush_radius
	                weight_sum = weight_sum + brush_weight
	                brush_weights.add(brush_weight)
	            }
	        }
	    }
		for (var w in brush_weights) {
			w = w / weight_sum
		}
		this.brush_index_offsets_buf = ComputeBuffer.init("int", brush_index_offsets, 2)
		this.brush_weights_buf = ComputeBuffer.init("float", brush_weights, 3)
		this.brush_length = brush_index_offsets.count

		// Generate random indices for droplet placement
		if (this.iter_dirty)
		{
			var random_indices = []
			for (var i in 0..this.iter) {
				var x = this.random.int(HEIGHTFIELD_SIZE)
				var y = this.random.int(HEIGHTFIELD_SIZE)
				random_indices.add(y * HEIGHTFIELD_SIZE + x)
			}
			this.random_indices_buf = ComputeBuffer.init("int", random_indices, 1)
			this.iter_dirty = false
		}
	}

	get_result()
	{
		if (!this.heights_buf) {
			return
		}

		var heights = this.heights_buf.download("float", HEIGHTFIELD_SIZE * HEIGHTFIELD_SIZE)
		this.hf.tex.upload(heights, 0, 0, HEIGHTFIELD_SIZE, HEIGHTFIELD_SIZE)
	}
}