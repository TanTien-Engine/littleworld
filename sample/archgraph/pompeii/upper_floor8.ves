var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "facade"
node0.var_type = "geometry"

_editor.add_node(node0, -136.4380676608, 201.6027437756)

var node1 = ::blueprint::nodes::output::Output()

node1.var_name = "geo"
node1.var_type = [ "geometry", "array" ]

_editor.add_node(node1, 1053.3751327057, 123.20185600785)

var node2 = ::archgraph::nodes::split::Split()
node2.query_param("axis").value = "hori"
node2.query_param("repeat").value = false

_editor.add_node(node2, 18.802636719306, 72.710495920624)

var node3 = ::archgraph::nodes::split_size::SplitSize()
node3.query_param("size").value = 0
node3.query_param("mode").value = "floating"

_editor.add_node(node3, -133, 115.5)

var node4 = ::archgraph::nodes::rand_number::RandNumber()
node4.query_param("min").value = 1
node4.query_param("max").value = 2

_editor.add_node(node4, -632.4186189468, 170.5099036951)

var node5 = ::archgraph::nodes::split_size::SplitSize()
node5.query_param("size").value = 0
node5.query_param("mode").value = "floating"

_editor.add_node(node5, -131.08619629807, -71.727089555482)

var node6 = ::archgraph::nodes::rand_number::RandNumber()
node6.query_param("min").value = 1
node6.query_param("max").value = 2

_editor.add_node(node6, -631.66698860497, 45.461550858255)

var node7 = ::archgraph::nodes::split_size::SplitSize()
node7.query_param("size").value = 10
node7.query_param("mode").value = "floating"

_editor.add_node(node7, -128.55102174656, 21.338461621751)

var node8 = ::blueprint::nodes::subgraph::Subgraph()
node8.load_from_file(_editor, "painted_wall.ves")

_editor.add_node(node8, 228.54018332742, 242.7584080972)

var node9 = ::blueprint::nodes::subgraph::Subgraph()
node9.load_from_file(_editor, "painted_wall.ves")

_editor.add_node(node9, 212.93370835986, -52.438933614431)

var node10 = ::archgraph::nodes::split::Split()
node10.query_param("axis").value = "hori"
node10.query_param("repeat").value = true

_editor.add_node(node10, 531.63752475924, 70.228502151492)

var node11 = ::blueprint::nodes::subgraph::Subgraph()
node11.load_from_file(_editor, "win_props.ves")

_editor.add_node(node11, 214.7513148009, 88.251314800902)

var node12 = ::archgraph::nodes::split_size::SplitSize()
node12.query_param("size").value = 0
node12.query_param("mode").value = "floating"

_editor.add_node(node12, 399.51671407379, 48.767932477833)

var node13 = ::blueprint::nodes::subgraph::Subgraph()
node13.load_from_file(_editor, "tile_small_window.ves")

_editor.add_node(node13, 714.50023239299, 97.327378368827)

var node14 = ::blueprint::nodes::merge::Merge()

_editor.add_node(node14, 910.20809809584, 92.382355659714)

var node15 = ::blueprint::nodes::store::Store()

node15.var_name = "val"

_editor.add_node(node15, -500.19114310806, 189.94853838164)

var node16 = ::blueprint::nodes::store::Store()

node16.var_name = "val"

_editor.add_node(node16, -500.87417683205, 63.591048909817)

var node17 = ::blueprint::nodes::load::Load()

node17.var_name = "val"

_editor.add_node(node17, -270.0156491852, 135.9904668868)

var node18 = ::blueprint::nodes::load::Load()

node18.var_name = "val"

_editor.add_node(node18, -268.64961893527, -50.472180402146)

Blueprint.connect(node11, "small_tile_width", node12, "size")
Blueprint.connect(node6, "val", node16, "var")
Blueprint.connect(node16, "var", node18, "var")
Blueprint.connect(node18, "var", node5, "size")
Blueprint.connect(node4, "val", node15, "var")
Blueprint.connect(node15, "var", node17, "var")
Blueprint.connect(node17, "var", node3, "size")
Blueprint.connect(node0, "var", node2, "parent")
Blueprint.connect(node3, "size", node2, "size0")
Blueprint.connect(node7, "size", node2, "size1")
Blueprint.connect(node5, "size", node2, "size2")
Blueprint.connect(node2, "child1", node10, "parent")
Blueprint.connect(node12, "size", node10, "size0")
Blueprint.connect(node10, "child0", node13, "facade")
Blueprint.connect(node2, "child2", node9, "geo")
Blueprint.connect(node2, "child0", node8, "geo")
Blueprint.connect(node8, "geo", node14, "in0")
Blueprint.connect(node13, "geo", node14, "in1")
Blueprint.connect(node9, "geo", node14, "in2")
Blueprint.connect(node14, "list", node1, "var")
