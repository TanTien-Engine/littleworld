var node0 = ::blueprint::nodes::input::Input()

node0.var_name = "facade"
node0.var_type = "geometry"

_editor.add_node(node0, 201.8015523392, 38.657823775601)

var node1 = ::archgraph::nodes::primitive_cube::PrimitiveCube()
node1.query_param("size").value.set(1, 1, 1)

_editor.add_node(node1, -294.55292489196, 126.89059174428)

var node2 = ::blueprint::nodes::subgraph::Subgraph()
node2.load_from_file(_editor, "../../../assets/archgraph/texture.ves")

_editor.add_node(node2, 291.1085397592, 201.3137404956)

var node3 = ::archgraph::nodes::setup_projection::SetupProjection()
node3.query_param("axes").value = "xy"
node3.query_param("scale").value.set(1, 1)
node3.query_param("scale2").value.set(1, 1)
node3.query_param("offset").value.set(0, 0)
node3.query_param("uw_factor").value = 1
node3.query_param("gpu").value = false

_editor.add_node(node3, -93.716697178419, -30.32718913607)

var node4 = ::archgraph::nodes::insert::Insert()

_editor.add_node(node4, 737.13356278428, 137.93237013792)

var node5 = ::blueprint::nodes::output::Output()

node5.var_name = "geo"
node5.var_type = [ "geometry", "array" ]

_editor.add_node(node5, 876.203, 148.434)

var node6 = ::blueprint::nodes::input::Input()

node6.var_name = "texture"
node6.var_type = "texture"

_editor.add_node(node6, 93.25274822505, 145.86389929002)

var node7 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node7, 95.00141279095, 240.87063579372)

var node8 = ::archgraph::nodes::setup_projection::SetupProjection()
node8.query_param("axes").value = "yx"
node8.query_param("scale").value.set(1, 1)
node8.query_param("scale2").value.set(1, 1)
node8.query_param("offset").value.set(0, 0)
node8.query_param("uw_factor").value = 1
node8.query_param("gpu").value = false

_editor.add_node(node8, -94.200709713974, 222.25490087479)

var node9 = ::blueprint::nodes::property::Property()

node9.var_name = "hori"
node9.var_type = "bool"

_editor.add_node(node9, -98.55194908262, 383.34905919675)

var node10 = ::archgraph::nodes::scale_scope::ScaleScope()
node10.query_param("s").value.set(1, 1, 1)
node10.query_param("anchor").value = "left"

_editor.add_node(node10, 343.5320067058, -17.076845947268)

var node11 = ::blueprint::nodes::subgraph::Subgraph()
node11.load_from_file(_editor, "../../../assets/archgraph/align_front.ves")

_editor.add_node(node11, 525.31326904297, 63.251928710938)

var node12 = ::blueprint::nodes::subgraph::Subgraph()
node12.load_from_file(_editor, "wall_props.ves")

_editor.add_node(node12, 153.35548095703, -48.524356079102)

Blueprint.connect(node1, "geo", node8, "geo")
Blueprint.connect(node1, "geo", node3, "geo")
Blueprint.connect(node9, "var", node7, "cond")
Blueprint.connect(node8, "geo", node7, "true")
Blueprint.connect(node3, "geo", node7, "false")
Blueprint.connect(node7, "result", node2, "geo")
Blueprint.connect(node6, "var", node2, "texture")
Blueprint.connect(node0, "var", node10, "geo")
Blueprint.connect(node12, "depth", node10, "z")
Blueprint.connect(node10, "geo", node11, "pos")
Blueprint.connect(node2, "geo", node4, "geo")
Blueprint.connect(node11, "pos", node4, "pos")
Blueprint.connect(node4, "geo", node5, "var")
