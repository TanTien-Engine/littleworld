var node0 = ::archgraph::nodes::primitive_cube::PrimitiveCube()
node0.query_param("size").value.set(1, 1, 1)

_editor.add_node(node0, -462.40895323116, 154.39538746868)

var node1 = ::blueprint::nodes::subgraph::Subgraph()
node1.load_from_file(_editor, "../../../assets/archgraph/texture.ves")

_editor.add_node(node1, 166.13071330455, -16.726285244546)

var node2 = ::archgraph::nodes::setup_projection::SetupProjection()
node2.query_param("axes").value = "xy"
node2.query_param("scale").value.set(1, 1)
node2.query_param("scale2").value.set(1, 1)
node2.query_param("offset").value.set(0, 0)
node2.query_param("uw_factor").value = 1
node2.query_param("gpu").value = false

_editor.add_node(node2, -59.097282892975, -36.026160618099)

var node3 = ::blueprint::nodes::subgraph::Subgraph()
node3.load_from_file(_editor, "wood_tex.ves")

_editor.add_node(node3, -106.3405690696, -201.59844260476)

var node4 = ::blueprint::nodes::subgraph::Subgraph()
node4.load_from_file(_editor, "../../../assets/archgraph/texture.ves")

_editor.add_node(node4, 164.61251142, 99.55753622)

var node5 = ::archgraph::nodes::setup_projection::SetupProjection()
node5.query_param("axes").value = "yx"
node5.query_param("scale").value.set(1, 1)
node5.query_param("scale2").value.set(1, 1)
node5.query_param("offset").value.set(0, 0)
node5.query_param("uw_factor").value = 1
node5.query_param("gpu").value = false

_editor.add_node(node5, -58.922334115951, 170.71089283364)

var node6 = ::blueprint::nodes::branch_f::BranchF()

_editor.add_node(node6, 389.49445551092, 66.332777543504)

var node7 = ::blueprint::nodes::input::Input()

node7.var_name = "facade"
node7.var_type = "geometry"

_editor.add_node(node7, 166.34483539968, -132.81338863575)

var node8 = ::archgraph::nodes::insert::Insert()

_editor.add_node(node8, 660.59431444508, -18.364684137677)

var node9 = ::blueprint::nodes::output::Output()

node9.var_name = "geo"
node9.var_type = "geometry"

_editor.add_node(node9, 805.82705221277, -7.7265580522021)

var node10 = ::blueprint::nodes::property::Property()

node10.var_name = "hori"
node10.var_type = "bool"

_editor.add_node(node10, 217.66248321533, 189.70577448065)

var node11 = ::archgraph::nodes::scale_scope::ScaleScope()
node11.query_param("s").value.set(1, 1, 0.35)
node11.query_param("anchor").value = "left"

_editor.add_node(node11, 303.64983759685, -202.59556780282)

var node12 = ::blueprint::nodes::subgraph::Subgraph()
node12.load_from_file(_editor, "../../../assets/archgraph/align_front.ves")

_editor.add_node(node12, 487.95572645454, -132.81210631799)

var node13 = ::blueprint::nodes::subgraph::Subgraph()
node13.load_from_file(_editor, "wall_props.ves")

_editor.add_node(node13, 124.37093456738, -220.47129092738)

Blueprint.connect(node7, "var", node11, "geo")
Blueprint.connect(node13, "depth", node11, "z")
Blueprint.connect(node11, "geo", node12, "pos")
Blueprint.connect(node0, "geo", node5, "geo")
Blueprint.connect(node5, "geo", node4, "geo")
Blueprint.connect(node3, "tex", node4, "texture")
Blueprint.connect(node0, "geo", node2, "geo")
Blueprint.connect(node2, "geo", node1, "geo")
Blueprint.connect(node3, "tex", node1, "texture")
Blueprint.connect(node10, "var", node6, "cond")
Blueprint.connect(node4, "geo", node6, "true")
Blueprint.connect(node1, "geo", node6, "false")
Blueprint.connect(node6, "result", node8, "geo")
Blueprint.connect(node12, "pos", node8, "pos")
Blueprint.connect(node8, "geo", node9, "var")
