import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_FUNCTION
import "blueprint.node_param" for NodeParam
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "citygraph.utility" for Utility
import "citygen" for GeometryTools

class Extrude is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "lots", VAR_TYPE_ARRAY),
			Pin(this, "dist", [ VAR_TYPE_NUMBER, VAR_TYPE_FUNCTION ]),
		]
		this.exports = [
			Pin(this, "boxes", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("distance", 0.0, { "region" : 0.1 }))

		this.layout()
	}

	calc_value(idx)
	{
		var v_lots = Blueprint.calc_input_value(this, 0)
		if (!v_lots) {
			return nil
		}

		var distance = nil
		var v_distance = Blueprint.calc_input_value(this, 1)
		if (v_distance) {
			distance = v_distance.value
		} else {
			distance = this.query_param("distance").value
		}

		var boxes = []

		var all_lots = Utility.list_flatten(v_lots)		
		for (var v_lot in all_lots)
		{
			if (v_distance.type == VAR_TYPE_FUNCTION) {
				distance = v_distance.value.func_call().value
			}
			var polytope = GeometryTools.polygon_extrude(v_lot.value.shape, distance)
			
			var geo = VarGeo()
			geo.shape = Brush([ polytope ])
			boxes.add(Variant(VAR_TYPE_GEO, geo))
		}

		return Variant(boxes)		
	}
}