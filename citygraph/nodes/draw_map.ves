import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_PORT, VAR_TYPE_ARRAY
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.nodes.draw_geometry" for DrawGeometry
import "citygraph.streets_helper" for StreetsHelper
import "citygraph.variant" for VAR_TYPE_STREETS, VAR_TYPE_BLOCK
import "citygraph.style" for MAJOR_ROAD_COLOR, MINOR_ROAD_COLOR, COMMON_BLOCK_COLOR
import "maths.vector" for Vector3
import "graphics" for Graphics
import "geometry" for Polygon, Polyline
import "citygen" for Block, GeometryTools
import "maths" for Matrix44

class DrawMap is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "objs", VAR_TYPE_ARRAY)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.cam_mat = Matrix44.init()
		var w = Graphics.get_width()
		var h = Graphics.get_height()
		this.cam_mat.scale(w, h, 1.0)
		this.cam_mat.translate(-w/2, -h/2, 0.0)

		this.v_geos_pass1 = Variant([])
		this.v_geos_pass2 = Variant([])

		this.draw_geo_node = DrawGeometry()

		this.rebuild = false

		Blueprint.connect(VariantProxy(this.cam_mat), 0, this.draw_geo_node, "mat")		
	}

	on_pin_dirty(pin)
	{
		this.rebuild_geos()
	}

	render_run()
	{
		if (!this.rebuild) 
		{
			this.rebuild_geos()
			this.rebuild = true
		}

		Blueprint.connect(VariantProxy(this.v_geos_pass1), 0, this.draw_geo_node, "geos")
		this.draw_geo_node.render_run()

		Blueprint.connect(VariantProxy(this.v_geos_pass2), 0, this.draw_geo_node, "geos")
		this.draw_geo_node.render_run()		
	}

	rebuild_geos()
	{
		this.v_geos_pass1.value.clear()
		this.v_geos_pass2.value.clear()

		var v_objs = Blueprint.calc_input_value(this, 1)
		if (v_objs) {
			this.build_from_objs(v_objs)
		}
	}

	build_from_objs(v_objs)
	{
		if (!v_objs) {
			return
		}

		if (v_objs.value is List)
		{
			for (var item in v_objs.value) {
				this.build_from_objs(item)
			}
		}
		else
		{
			if (v_objs.type == VAR_TYPE_STREETS)
			{
				var v_streets = v_objs.value

				// edges
				var width = 0.01
				var color = MAJOR_ROAD_COLOR
				var dst = this.v_geos_pass2
				if (!v_streets.is_major)
				{
					width = 0.007
					color = MINOR_ROAD_COLOR
					dst = this.v_geos_pass1
				}

				var major = v_streets.streets.get_major_paths()
				this.build_roads(major, width, color, dst)
				var minor = v_streets.streets.get_minor_paths()
				this.build_roads(minor, width, color, dst)

				// blocks
				var polys = StreetsHelper.build_polygons(v_objs)
				this.build_blocks(polys, this.v_geos_pass2)
			}
			else if (v_objs.type == VAR_TYPE_BLOCK)
			{
				var v_block = v_objs.value

				var border = v_block.block.offset(v_block.offset)
				if (!border.isEmpty)
				{
					var poly = Polygon.init()
					poly.set_vertices(border)

					var geo = VarGeo()
					geo.shape = poly
					geo.render_style["color"] = COMMON_BLOCK_COLOR

					this.v_geos_pass2.value.add(Variant(VAR_TYPE_GEO, geo))
				}
			}
			else
			{
				this.v_geos_pass2.value.add(v_objs)
			}
		}
	}

	build_roads(polylines, width, color, dst)
	{
		for (var polyline in polylines)
		{
			var expand = GeometryTools.polyline_expand(polyline, width)

			if (expand)
			{
				var geo = VarGeo()
				geo.shape = Polygon.init()
				geo.shape.set_vertices(expand[0])
				geo.render_style["color"] = color

				dst.value.add(Variant(VAR_TYPE_GEO, geo))
			}
		}
	}

	build_blocks(polys, dst)
	{
		for (var poly in polys)
		{
			var block = Block.init(poly.value.shape)
			var dist = 0.007
			var vts = block.offset(dist)

			var poly = Polyline.init()
			poly.set_vertices(vts)
			poly.set_closed(true)

			var geo = VarGeo()
			geo.shape = poly
			geo.render_style["color"] = Vector3(0, 0, 0)

			dst.value.add(Variant(VAR_TYPE_GEO, geo))
		}
	}
}