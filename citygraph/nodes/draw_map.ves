import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_PORT
import "blueprint.variant_proxy" for VariantProxy
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.nodes.draw_geometry" for DrawGeometry
import "citygraph.streets_helper" for StreetsHelper
import "citygraph.variant" for VAR_TYPE_STREETS
import "citygraph.style" for MAJOR_ROAD_COLOR, MINOR_ROAD_COLOR
import "maths.vector" for Vector3
import "graphics" for Graphics
import "geometry" for Triangles, Polyline
import "citygen" for Block, GeometryTools

class DrawMap is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "prev",    VAR_TYPE_PORT),
			Pin(this, "streets", VAR_TYPE_STREETS),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.v_geos_pass1 = Variant([])
		this.v_geos_pass2 = Variant([])

		this.draw_geo_node = DrawGeometry()

		this.rebuild = false
	}

	on_pin_dirty(pin)
	{
		this.rebuild_geos()
	}

	render_run()
	{
		if (!this.rebuild) 
		{
			this.rebuild_geos()
			this.rebuild = true
		}

		Blueprint.connect(VariantProxy(this.v_geos_pass1), 0, this.draw_geo_node, "geos")
		this.draw_geo_node.render_run()

		Blueprint.connect(VariantProxy(this.v_geos_pass2), 0, this.draw_geo_node, "geos")
		this.draw_geo_node.render_run()		
	}

	rebuild_geos()
	{
		this.v_geos_pass1.value.clear()
		this.v_geos_pass2.value.clear()

		var v_streets = Blueprint.calc_input_value(this, 1)
		this.build_geos(v_streets)
	}

	build_geos(v_streets)
	{
		if (!v_streets) {
			return
		}

		if (v_streets.value is List)
		{
			for (var item in v_streets.value) {
				this.build_geos(item)
			}
		}
		else
		{
			var v_st = v_streets.value

			// edges
			var width = 0.01
			var color = MAJOR_ROAD_COLOR
			var dst = this.v_geos_pass2
			if (!v_st.is_major)
			{
				width = 0.007
				color = MINOR_ROAD_COLOR
				dst = this.v_geos_pass1
			}

			var major = v_streets.value.streets.get_major_paths()
			this.build_roads(major, width, color, dst)
			var minor = v_streets.value.streets.get_minor_paths()
			this.build_roads(minor, width, color, dst)

			// blocks
			var polys = StreetsHelper.build_polygons(v_streets)
			this.build_blocks(polys, this.v_geos_pass2)
		}
	}

	build_roads(polylines, width, color, dst)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		for (var polyline in polylines)
		{
			var expand = GeometryTools.polyline_expand(polyline, width)

			if (expand)
			{
				var poly = expand[0]

				var pts = []
				for (var i in 0 .. poly.count/2) 
				{
					pts.add((poly[i * 2] - 0.5) * w)
					pts.add((poly[i * 2 + 1] - 0.5) * h)
				}

				var geo = VarGeo()
				geo.shape = Triangles.init()
				geo.shape.set_border(pts)
				geo.render_style["color"] = color

				dst.value.add(Variant(VAR_TYPE_GEO, geo))
			}
		}
	}

	build_blocks(polys, dst)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		for (var poly in polys)
		{
			var block = Block.init(poly.value.shape)
			var dist = 0.007
			var offset_block = block.offset_clone(dist)
			var old_vts = offset_block.get_border()

			var vts = []
			for (var i in 0 .. old_vts.count/2) 
			{
				vts.add((old_vts[i * 2] - 0.5) * w)
				vts.add((old_vts[i * 2 + 1] - 0.5) * h)
			}

			var poly = Polyline.init()
			poly.set_vertices(vts)
			poly.set_closed(true)

			var geo = VarGeo()
			geo.shape = poly
			geo.render_style["color"] = Vector3(0, 0, 0)

			dst.value.add(Variant(VAR_TYPE_GEO, geo))
		}
	}
}