import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_PORT, VAR_TYPE_ARRAY
import "blueprint.input_proxy" for InputProxy
import "blueprint.variant_proxy" for VariantProxy
import "rendergraph.variant" for VAR_TYPE_TEXTURE
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "geograph.nodes.draw_geometry" for DrawGeometry
import "editor.node_cache" for NODE_CACHE
import "citygraph.variant" for VAR_TYPE_STREETS, VAR_TYPE_BLOCK, BLOCK_TYPE_COMMON, BLOCK_TYPE_PARK, ROAD_TYPE_MAJOR, ROAD_TYPE_MINOR, ROAD_TYPE_TINY, ROAD_TYPE_RIVER
import "citygraph.style" for MAJOR_ROAD_COLOR, MINOR_ROAD_COLOR, RIVER_COLOR, COMMON_BLOCK_COLOR, GREEN_BLOCK_COLOR
import "maths.vector" for Vector3
import "geometry" for Polyline3D, PolyPoint, PolyFace, Polytope
import "graphics" for Graphics
import "citygen" for GeometryTools, Heightfield
import "math" for Math

class DrawMap3d is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "objs", VAR_TYPE_ARRAY),
			Pin(this, "hf",   VAR_TYPE_TEXTURE)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.v_models = Variant([])

		this.draw_model_node = NODE_CACHE.fetch("../littleworld/assets/blueprints/render/9_edit_draw.ves", nil)
//		Blueprint.connect(InputProxy(this, 1), 0, this.draw_model_node, "list")
		Blueprint.connect(VariantProxy(this.v_models), 0, this.draw_model_node, "list")
		Blueprint.connect(InputProxy(this, 2), 0, this.draw_model_node, "heightmap")

		this.draw_shape_node = DrawGeometry()

		this.v_shapes = Variant([])
		Blueprint.connect(VariantProxy(this.v_shapes), 0, this.draw_shape_node, "geos")

		Blueprint.connect(this.draw_model_node.op_node, "mat", this.draw_shape_node, "mat")

		this.need_rebuild = false

		this.heightfield = nil
	}

	on_pin_dirty(pin)
	{
		if (pin == this.imports[1])
		{
			this.draw_model_node.on_pin_dirty(this.draw_model_node.imports[1])

			this.need_rebuild = true
		}
		else if (pin == this.imports[2])
		{
			this.heightfield = nil

			this.need_rebuild = true
		}
	}

	on_node_dirty()
	{
		this.need_rebuild = true
	}

	render_run()
	{
		if (this.need_rebuild) {
			this.rebuild_geos()
			this.need_rebuild = false
		}

//		Graphics.set_cam_ortho(false)

		this.draw_shape_node.render_run()

		this.draw_model_node.render_run()
	}

	on_key_pressed(key) {
		this.draw_model_node.on_key_pressed(key)
	}

	on_key_released(key) {
		this.draw_model_node.on_key_released(key)
	}

	on_mouse_pressed(x, y, btn) {
		this.draw_model_node.on_mouse_pressed(x, y, btn)
	}

	on_mouse_released(x, y, btn) {
		this.draw_model_node.on_mouse_released(x, y, btn)
	}

	on_mouse_moved(x, y, btn) {
		this.draw_model_node.on_mouse_moved(x, y, btn)
	}

	on_mouse_dragged(x, y, btn) {
		this.draw_model_node.on_mouse_dragged(x, y, btn)
	}

	on_mouse_scrolled(x, y, dx, dy) {
		this.draw_model_node.on_mouse_scrolled(x, y, dx, dy)
	}

	rebuild_geos()
	{
		this.v_models.value.clear()
		this.v_shapes.value.clear()

		var v_objs = Blueprint.calc_input_value(this, 1)

		if (!this.heightfield)
		{
			var v_hf = Blueprint.calc_input_value(this, 2)
			if (v_hf) {
				this.heightfield = Heightfield.init(v_hf.value.tex)
			}
		}

		this.build_ground_mdoel(GREEN_BLOCK_COLOR)
		this.build_grids_mdoel()

		this.build_streets(v_objs)
	}

	build_streets(v_objs)
	{
		if (!v_objs) {
			return
		}

		if (v_objs.value is List)
		{
			for (var item in v_objs.value) {
				this.build_streets(item)
			}
		}
		else if (v_objs.type == VAR_TYPE_STREETS)
		{
			var v_streets = v_objs.value

			var width = 0.008
			var height = -0.001
			var color = MAJOR_ROAD_COLOR
			if (v_streets.type == ROAD_TYPE_MAJOR)
			{
				width = 0.008
				height = -0.001
				color = MAJOR_ROAD_COLOR
			}
			else if (v_streets.type == ROAD_TYPE_MINOR)
			{
				width = 0.006
				height = -0.0007
				color = MINOR_ROAD_COLOR
			}
			else if (v_streets.type == ROAD_TYPE_TINY)
			{
				width = 0.004
				height = -0.0007
				color = MINOR_ROAD_COLOR
			}
			else if (v_streets.type == ROAD_TYPE_RIVER)
			{
				width = 0.012
				height = -0.0008
				color = RIVER_COLOR
			}			

			// edges
			var major = v_streets.streets.get_major_paths()
//			this.build_routes_shape(major, Vector3(1.0, 0.0, 0.0))
			this.build_routes_model(major, color, width, height)

			var minor = v_streets.streets.get_minor_paths()
//			this.build_routes_shape(minor, Vector3(0.0, 1.0, 0.0))
			this.build_routes_model(minor, color, width, height)

//			// blocks
//			var blocks = v_streets.streets.get_polygons()
//			for (var block in blocks) {
//				this.build_block_model(block.value.shape, COMMON_BLOCK_COLOR)
//			}
		}
		else if (v_objs.type == VAR_TYPE_BLOCK)
		{
			var v_block = v_objs.value
			var color = Vector3(0, 0, 0)
			if (v_block.type == BLOCK_TYPE_COMMON) {
				color = COMMON_BLOCK_COLOR
			} else if (v_block.type == BLOCK_TYPE_PARK) {
				color = GREEN_BLOCK_COLOR
			}	
			this.build_block_model(v_block.poly, color)			
		}
		else if (v_objs.type == VAR_TYPE_GEO)
		{
			if (v_objs.type == VAR_TYPE_GEO and v_objs.value.shape is Brush and this.heightfield) {
				for (var poly in v_objs.value.shape.polys) {
					GeometryTools.polytope_add_height(poly, this.heightfield)
				}
			}
			this.v_models.value.add(v_objs)
		}
	}

	build_routes_shape(paths, color)
	{
		for (var path in paths)
		{
			var vertices_3d = []

			var vertices_2d = path.get_vertices()
			for (var i in 0 .. vertices_2d.count / 2)
			{
				vertices_3d.add(vertices_2d[i * 2])
				vertices_3d.add(0)				
				vertices_3d.add(vertices_2d[i * 2 + 1])				
			}

			var poly3d = Polyline3D.init()
			poly3d.set_vertices(vertices_3d)

			var geo = VarGeo()
			geo.shape = poly3d
			geo.render_style["color"] = color

			this.v_shapes.value.add(Variant(VAR_TYPE_GEO, geo))
		}
	}

	build_routes_model(paths, color, width, height)
	{
		for (var path in paths)
		{
			var polygon = GeometryTools.polyline_expand(path, width)
			if (polygon)
			{
				var polytope = GeometryTools.polygon_extrude_face(polygon, height)
				if (this.heightfield) {
					GeometryTools.polytope_add_height(polytope, this.heightfield)				
				}

				var brush = Brush([ polytope ])
				brush.color = Vector3(Math.floor(255 * color.x), Math.floor(255 * color.y), Math.floor(255 * color.z))

				var geo = VarGeo()
				geo.shape = brush

				this.v_models.value.add(Variant(VAR_TYPE_GEO, geo))
			}
		}
	}

	build_block_model(poly, color)
	{
		var polytope = GeometryTools.polygon_extrude_face(poly, -0.001)
		if (this.heightfield) {
			GeometryTools.polytope_add_height(polytope, this.heightfield)
		}

		var brush = Brush([ polytope ])
		brush.color = Vector3(Math.floor(255 * color.x), Math.floor(255 * color.y), Math.floor(255 * color.z))

		var geo = VarGeo()
		geo.shape = brush

		this.v_models.value.add(Variant(VAR_TYPE_GEO, geo))
	}

	build_ground_mdoel(color)
	{
		var num = 64

		var points = []
		for (var iy in 0..num+1) {
			for (var ix in 0..num+1) {
				var x = ix / num
				var z = iy / num
				var y = - 0.01
				if (this.heightfield) {
					y = y + this.heightfield.get_height(x, z)
				}
				points.add(PolyPoint.init([ x, y, z ]))
			}
		}

		var faces = []
		for (var iy in 0..num) {
			for (var ix in 0..num) {
				var face = []
				face.add(iy * (num + 1) + ix)
				face.add(iy * (num + 1) + ix + 1)
				face.add((iy + 1) * (num + 1) + ix + 1)
				face.add((iy + 1) * (num + 1) + ix)
				faces.add(PolyFace.init(face, []))
			}
		}		

		var polytope = Polytope.init(points, faces)

		var brush = Brush([ polytope ])
		brush.color = Vector3(Math.floor(255 * color.x), Math.floor(255 * color.y), Math.floor(255 * color.z))		

		var geo = VarGeo()
		geo.shape = brush
		this.v_models.value.add(Variant(VAR_TYPE_GEO, geo))		
	}

	build_grids_mdoel()
	{
		var num = 64
		var line_w = 0.001

		var points = []
		for (var iy in 0..num+1) {
			for (var ix in 0..num+1) {
				var x = ix / num
				var z = iy / num
				var y =  - 0.01 + 0.001
				if (this.heightfield) {
					y = y + this.heightfield.get_height(x, z)			
				}
				points.add(PolyPoint.init([ x, y, z ]))
				points.add(PolyPoint.init([ x + line_w, y, z ]))
				points.add(PolyPoint.init([ x, y, z + line_w ]))
			}
		}

		var faces = []
		for (var iy in 0..num) 
		{
			for (var ix in 0..num) 
			{
				var face_x = []
				face_x.add((iy * (num + 1) + ix) * 3)
				face_x.add((iy * (num + 1) + ix + 1) * 3)
				face_x.add((iy * (num + 1) + ix + 1) * 3 + 2)
				face_x.add((iy * (num + 1) + ix) * 3 + 2)
				faces.add(PolyFace.init(face_x, []))

				var face_y = []
				face_y.add((iy * (num + 1) + ix) * 3)
				face_y.add((iy * (num + 1) + ix) * 3 + 1)
				face_y.add(((iy + 1) * (num + 1) + ix) * 3 + 1)
				face_y.add(((iy + 1) * (num + 1) + ix) * 3)
				faces.add(PolyFace.init(face_y, []))				
			}
		}

		var polytope = Polytope.init(points, faces)

		var brush = Brush([ polytope ])
		brush.color = Vector3(0, 0, 0)		

		var geo = VarGeo()
		geo.shape = brush
		this.v_models.value.add(Variant(VAR_TYPE_GEO, geo))		
	}
}