import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_PORT, VAR_TYPE_ARRAY
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.nodes.draw_geometry" for DrawGeometry
import "citygraph.variant" for VAR_TYPE_STREETS, VAR_TYPE_BLOCK, BLOCK_TYPE_COMMON, BLOCK_TYPE_PARK, BLOCK_TYPE_RIVER, ROAD_TYPE_MAJOR, ROAD_TYPE_MINOR, ROAD_TYPE_TINY
import "citygraph.style" for MAJOR_ROAD_COLOR, MINOR_ROAD_COLOR, COMMON_BLOCK_COLOR, GREEN_BLOCK_COLOR
import "maths.vector" for Vector3
import "graphics" for Graphics
import "geometry" for Polyline
import "citygen" for GeometryTools
import "maths" for Matrix44

class DrawMap2d is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "prev", VAR_TYPE_PORT),
			Pin(this, "objs", VAR_TYPE_ARRAY)
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.layout()

		this.cam_mat = Matrix44.init()
		var w = Graphics.get_width()
		var h = Graphics.get_height()
		this.cam_mat.scale(w, h, 1.0)
		this.cam_mat.translate(-w/2, -h/2, 0.0)

		this.v_geos_pass1 = Variant([])
		this.v_geos_pass2 = Variant([])

		this.draw_geo_node = DrawGeometry()

		Blueprint.connect(VariantProxy(this.cam_mat), 0, this.draw_geo_node, "mat")

		this.need_rebuild = false
	}

	on_pin_dirty(pin)
	{
		this.need_rebuild = true
	}

	on_node_dirty()
	{
		this.need_rebuild = true
	}

	render_run()
	{
		if (this.need_rebuild) {
			this.rebuild_geos()
			this.need_rebuild = false
		}

		Blueprint.connect(VariantProxy(this.v_geos_pass1), 0, this.draw_geo_node, "geos")
		this.draw_geo_node.render_run()

		Blueprint.connect(VariantProxy(this.v_geos_pass2), 0, this.draw_geo_node, "geos")
		this.draw_geo_node.render_run()		
	}

	rebuild_geos()
	{
		this.v_geos_pass1.value.clear()
		this.v_geos_pass2.value.clear()

		var v_objs = Blueprint.calc_input_value(this, 1)
		if (v_objs) {
			this.build_from_objs(v_objs)
		}
	}

	build_from_objs(v_objs)
	{
		if (!v_objs) {
			return
		}

		if (v_objs.value is List)
		{
			for (var item in v_objs.value) {
				this.build_from_objs(item)
			}
		}
		else
		{
			if (v_objs.type == VAR_TYPE_STREETS)
			{
				var v_streets = v_objs.value

				var width = 0.006
				var color = MAJOR_ROAD_COLOR
				var dst = this.v_geos_pass2
				if (v_streets.type == ROAD_TYPE_MAJOR)
				{
					width = 0.006
					color = MAJOR_ROAD_COLOR
					dst = this.v_geos_pass2
				}
				else if (v_streets.type == ROAD_TYPE_MINOR)
				{
					width = 0.006
					color = MINOR_ROAD_COLOR
					dst = this.v_geos_pass1
				}
				else if (v_streets.type == ROAD_TYPE_TINY)
				{
					width = 0.004
					color = MINOR_ROAD_COLOR
					dst = this.v_geos_pass1
				}

				var major = v_streets.streets.get_major_paths()
				this.build_roads(major, width, color, dst)
				var minor = v_streets.streets.get_minor_paths()
				this.build_roads(minor, width, color, dst)
			}
			else if (v_objs.type == VAR_TYPE_BLOCK)
			{
				var v_block = v_objs.value
				var color = Vector3(0, 0, 0)
				if (v_block.type == BLOCK_TYPE_COMMON) {
					color = COMMON_BLOCK_COLOR
				} else if (v_block.type == BLOCK_TYPE_PARK) {
					color = GREEN_BLOCK_COLOR
				}

				var geo = VarGeo()
				geo.shape = v_block.poly
				geo.render_style["color"] = color
				geo.render_style["fill"] = true
				this.v_geos_pass1.value.add(Variant(VAR_TYPE_GEO, geo))
			}
			else
			{
				this.v_geos_pass2.value.add(v_objs)
			}
		}
	}

	build_roads(polylines, width, color, dst)
	{
		for (var polyline in polylines)
		{
			var polygon = GeometryTools.polyline_expand(polyline, width)
			if (polygon)
			{
				var geo = VarGeo()
				geo.shape = polygon
				geo.render_style["color"] = color
				geo.render_style["fill"] = true

				dst.value.add(Variant(VAR_TYPE_GEO, geo))
			}
		}
	}
}