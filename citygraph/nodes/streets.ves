import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "blueprint.node_param" for NodeParam
import "rendergraph.variant" for VAR_TYPE_TEXTURE
import "citygraph.variant" for VAR_TYPE_STREETS, VarStreets
import "geograph.variant" for VAR_TYPE_GEO
import "citygen" for Streets as cg_Streets

class Streets is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "tf", VAR_TYPE_TEXTURE),
			Pin(this, "borders", VAR_TYPE_GEO),
		]
		this.exports = [
			Pin(this, "streets", VAR_TYPE_STREETS),
		]

		this.params.add(NodeParam("num", 2, {  "integer" : true, "region" : 10 }))
		this.params.add(NodeParam("seed", 0))

		this.layout()

		this.v_streets = nil
	}

	on_node_dirty()
	{
		this.v_streets = nil
	}

	calc_value(idx)
	{
		if (!this.v_streets) {
			this.rebuild_streets()
		}

		return Variant(this.v_streets)
	}

	rebuild_streets()
	{
		var v_tex = Blueprint.calc_input_value(this, 0)
		if (!v_tex or !v_tex.value) {
			return nil
		}
	
		this.v_streets = []

		var v_borders = Blueprint.calc_input_value(this, 1)

		var borders = []
		if (v_borders and v_borders.value) 
		{
			if (v_borders.value is List) {
				for (var b in v_borders.value) {
					borders.add(b.value.shape)
				}
			} else {
				borders.add(borders.value.shape)
			}
		}

		if (borders.isEmpty) {
			borders.add(nil)
		}

		var seed = this.query_param("seed").value
		var num = this.query_param("num").value
		for (var border in borders)
		{
			var st = cg_Streets.init(v_tex.value.tex, border)

			st.set_seed(seed)
			st.build_streamlines(num)

			st.build_topology()

			var v_st = VarStreets(st)
			v_st.is_major = v_borders == nil

			this.v_streets.add(Variant(VAR_TYPE_STREETS, v_st))
		}
	}
}