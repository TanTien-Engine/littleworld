import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant
import "citygraph.variant" for VAR_TYPE_NETWORK
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.config" for POINT_RADIUS
import "geometry" for Polyline, Circle, Polygon, Triangles
import "graphics" for Graphics
import "maths.vector" for Vector3
import "math" for Math

class Streets is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "nw", VAR_TYPE_NETWORK)
		]
		this.exports = [
			Pin(this, "routes",    VAR_TYPE_GEO),
			Pin(this, "crossings", VAR_TYPE_GEO),
			Pin(this, "blocks",    VAR_TYPE_GEO),
		]

		this.layout()

		this.v_routes    = nil
		this.v_crossings = nil
		this.v_blocks    = nil
	}

	on_node_dirty()
	{
		this.v_routes    = nil
		this.v_crossings = nil
		this.v_blocks    = nil
	}

	calc_value(idx)
	{
		var v_nw = Blueprint.calc_input_value(this, 0)
		if (!v_nw) {
			return nil
		}

		var nw = v_nw.value

		if (idx == 0)
		{
			if (!this.v_routes) 
			{
				var major = nw.get_major_paths()
				var v_major = this.build_routes(major, Vector3(1.0, 0.0, 0.0))

				var minor = nw.get_minor_paths()
				var v_minor = this.build_routes(minor, Vector3(0.0, 1.0, 0.0))

				this.v_routes = Variant([ v_major, v_minor ])
			}

			return this.v_routes
		}
		else if (idx == 1)
		{
			if (!this.v_crossings)
			{
				var nodes = nw.get_nodes()
				this.v_crossings = this.build_crossings(nodes, Vector3(0.0, 0.0, 1.0))
			}

			return this.v_crossings
		}
		else if (idx == 2)
		{
			if (!this.v_blocks)
			{
				var polygons = nw.get_polygons()
				this.v_blocks = this.build_blocks(polygons)
			}

			return this.v_blocks
		}

		return nil		
	}

	build_routes(paths, color)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var geos = []

		for (var path in paths)
		{
			var pts = []
			for (var i in 0 .. path.count/2) 
			{
				pts.add((path[i * 2] - 0.5) * w)
				pts.add((path[i * 2 + 1] - 0.5) * h)
			}

			var geo = VarGeo()
			geo.shape = Polyline.init()
			geo.shape.set_vertices(pts)
			geo.render_style["color"] = color
			geos.add(Variant(VAR_TYPE_GEO, geo))
		}

		return Variant(geos)
	}

	build_crossings(nodes, color)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var geos = []

		for (var i in 0 .. nodes.count/2) 
		{
			var x = (nodes[i * 2] - 0.5) * w
			var y = (nodes[i * 2 + 1] - 0.5) * h

			var geo = VarGeo()
			geo.shape = Circle.init(x, y, POINT_RADIUS)

			var v_geo = Variant(VAR_TYPE_GEO, geo)
			v_geo.value.render_style["fill"] = true

			geos.add(v_geo)
		}

		return Variant(geos)
	}

	build_blocks(polygons)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		var geos = []

		var colors = [
			Vector3(1.0, 0.0, 0.0),
			Vector3(0.0, 1.0, 0.0),
			Vector3(0.0, 0.0, 1.0),
			Vector3(1.0, 1.0, 0.0),
			Vector3(0.0, 1.0, 1.0),
			Vector3(1.0, 0.0, 1.0),

			Vector3(0.5, 0.0, 0.0),
			Vector3(0.0, 0.5, 0.0),
			Vector3(0.0, 0.0, 0.5),
			Vector3(0.5, 0.5, 0.0),
			Vector3(0.0, 0.5, 0.5),
			Vector3(0.5, 0.0, 0.5),
		]

		for (var i in 0..polygons.count)
		{
			var polygon = polygons[i]

			var pts = []
			for (var i in 0 .. polygon.count/2) 
			{
				pts.add((polygon[i * 2] - 0.5) * w)
				pts.add((polygon[i * 2 + 1] - 0.5) * h)
			}

			var geo = VarGeo()
			geo.shape = Triangles.init()
			geo.shape.set_border(pts)
			geo.render_style["color"] = colors[Math.mod(i, colors.count)]
			geos.add(Variant(VAR_TYPE_GEO, geo))
		}

		return Variant(geos)
	}
}