import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "maths.vector" for Vector3
import "citygen" for GeometryTools

class ShapeU is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "lots", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "lots", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("front", 0.01, { "region" : 0.1 }))
		this.params.add(NodeParam("left", 0.01, { "region" : 0.1 }))
		this.params.add(NodeParam("right", 0.01, { "region" : 0.1 }))

		this.layout()

		this.v_lots = nil
	}

	on_node_dirty()
	{
		this.v_lots = nil
	}

	calc_value(idx)
	{
		var v_lots = Blueprint.calc_input_value(this, 0)
		if (!v_lots) {
			return nil
		}

		if (!this.v_lots) {
			this.v_lots = Variant(this.build_lots(v_lots.value))
		}

		return this.v_lots
	}

	build_lots(lots)
	{
		var ret = []

		var front = this.query_param("front").value
		var left = this.query_param("left").value
		var right = this.query_param("right").value

		for (var lot in lots)
		{
			var polygon = GeometryTools.shape_u(lot.value.shape, front, left, right, false)
			if (polygon and GeometryTools.is_counterclockwise(polygon))
			{
				var geo = VarGeo()
				geo.shape = polygon
				geo.render_style["color"] = Vector3(0, 0, 0)
				geo.render_style["fill"] = false

				ret.add(Variant(VAR_TYPE_GEO, geo))
			}
		}

		return ret
	}	
}