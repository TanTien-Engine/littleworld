import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_PORT
import "blueprint.variant_proxy" for VariantProxy
import "blueprint.node_param" for NodeParam
import "geograph.nodes.draw_geometry" for DrawGeometry
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.config" for POINT_RADIUS
import "citygraph.variant" for VAR_TYPE_STREETS
import "citygraph.style" for BLOCK_COLORS
import "maths.vector" for Vector3
import "graphics" for Graphics
import "geometry" for Circle, Polyline, Triangles
import "math" for Math

class DrawNetwork is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "prev",    VAR_TYPE_PORT),
			Pin(this, "streets", VAR_TYPE_STREETS),
		]
		this.exports = [
			Pin(this, "next", VAR_TYPE_PORT)
		]

		this.params.add(NodeParam("faces", false))

		this.layout()

		this.draw_geo_node = DrawGeometry()

		this.v_geos = Variant([])
		Blueprint.connect(VariantProxy(this.v_geos), 0, this.draw_geo_node, "geos")

		this.rebuild = false
	}

	on_pin_dirty(pin)
	{
		this.rebuild_geos()
	}

	render_run()
	{
		if (!this.rebuild) 
		{
			this.rebuild_geos()
			this.rebuild = true
		}

		this.draw_geo_node.render_run()
	}

	rebuild_geos()
	{
		this.v_geos.value.clear()

		var v_streets = Blueprint.calc_input_value(this, 1)
		this.build_geos(v_streets)
	}

	build_geos(v_streets)
	{
		if (!v_streets) {
			return
		}

		if (v_streets.value is List)
		{
			for (var item in v_streets.value) {
				this.build_geos(item)
			}
		}
		else
		{
			var faces = this.query_param("faces").value
			if (faces)
			{
				// blocks
				var blocks = v_streets.value.streets.get_polygons()
				this.build_blocks(blocks)
			}
			else
			{
				// edges
				var major = v_streets.value.streets.get_major_paths()
				this.build_routes(major,  Vector3(1.0, 0.0, 0.0))
				var minor = v_streets.value.streets.get_minor_paths()
				this.build_routes(minor,  Vector3(0.0, 1.0, 0.0))

				// nodes
				var nodes = v_streets.value.streets.get_nodes()
				this.build_crossings(nodes, Vector3(0.0, 0.0, 1.0))
			}
		}
	}

	build_crossings(nodes, color)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		for (var i in 0 .. nodes.count/2) 
		{
			var x = (nodes[i * 2] - 0.5) * w
			var y = (nodes[i * 2 + 1] - 0.5) * h

			var geo = VarGeo()
			geo.shape = Circle.init(x, y, POINT_RADIUS)
			geo.render_style["fill"] = true
			geo.render_style["color"] = color

			this.v_geos.value.add(Variant(VAR_TYPE_GEO, geo))
		}
	}

	build_routes(paths, color)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		for (var path in paths)
		{
			var pts = []
			for (var i in 0 .. path.count/2) 
			{
				pts.add((path[i * 2] - 0.5) * w)
				pts.add((path[i * 2 + 1] - 0.5) * h)
			}

			var geo = VarGeo()
			geo.shape = Polyline.init()
			geo.shape.set_vertices(pts)
			geo.render_style["color"] = color

			this.v_geos.value.add(Variant(VAR_TYPE_GEO, geo))
		}
	}	

	build_blocks(polygons)
	{
		var w = Graphics.get_width()
		var h = Graphics.get_height()

		for (var i in 0..polygons.count)
		{
			var old_pts = polygons[i]

			var pts = []
			for (var i in 0 .. old_pts.count/2) 
			{
				pts.add((old_pts[i * 2] - 0.5) * w)
				pts.add((old_pts[i * 2 + 1] - 0.5) * h)
			}

			var polygon = Triangles.init()
			polygon.set_border(pts)

			var geo = VarGeo()
			geo.shape = polygon 
			geo.render_style["color"] = BLOCK_COLORS[Math.mod(i, BLOCK_COLORS.count)]

			this.v_geos.value.add(Variant(VAR_TYPE_GEO, geo))
		}
	}
}