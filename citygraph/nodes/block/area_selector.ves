import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.node_param" for NodeParam
import "citygraph.utility" for Utility
import "citygraph.variant" for VAR_TYPE_BLOCK, VarBlock

class AreaSelector is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "blocks", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "selected", VAR_TYPE_ARRAY),
			Pin(this, "others",   VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("num", 1, {  "integer" : true, "region" : 10 }))

		this.layout()
	}

	calc_value(idx)
	{
		var v_polys = Blueprint.calc_input_value(this, 0)
		var all_polys = Utility.list_flatten(v_polys)
		if (idx == 0) {
			return Variant(this.select_polygons(all_polys, true))
		} else if (idx == 1) {
			return Variant(this.select_polygons(all_polys, false))
		}
		return nil
	}

	select_polygons(src_polys, out_sel)
	{
		var num = this.query_param("num").value
		if (src_polys.count < num) {
			return src_polys
		}

		var poly_area = []
		for (var v_poly in src_polys) {
			var area = v_poly.value.poly.calc_area()
			poly_area.add([ v_poly, area ])
		}

		fun poly_area_cmp(v0, v1) {
			return v0[1] > v1[1]
		}
		poly_area.sort(poly_area_cmp)

		var polys = []
		if (out_sel)
		{
			for (var i in 0..num) {
				polys.add(poly_area[i][0])
			}
		}
		else
		{
			for (var i in num..poly_area.count) {
				polys.add(poly_area[i][0])
			}
		}
		return polys
	}
}