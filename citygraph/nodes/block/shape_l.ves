import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "citygraph.variant" for VAR_TYPE_BLOCK, VarBlock
import "maths.vector" for Vector3
import "citygen" for GeometryTools

class ShapeL is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "blocks", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "blocks", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("front", 0.01, { "region" : 0.1 }))
		this.params.add(NodeParam("left", 0.01, { "region" : 0.1 }))

		this.layout()
	}

	calc_value(idx)
	{
		var v_blocks = Blueprint.calc_input_value(this, 0)
		if (!v_blocks) {
			return nil
		}

		return Variant(this.build_blocks(v_blocks.value))
	}

	build_blocks(blocks)
	{
		var ret = []

		var front = this.query_param("front").value
		var left = this.query_param("left").value

		for (var block in blocks)
		{
			var polygon = GeometryTools.shape_l(block.value.poly, front, left, false)
			if (polygon and GeometryTools.is_counterclockwise(polygon))
			{
				var v_block = VarBlock(polygon, block.value.type)
				ret.add(Variant(VAR_TYPE_BLOCK, v_block))
			}
		}

		return ret
	}	
}