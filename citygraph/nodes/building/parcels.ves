import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "citygraph.utility" for Utility
import "citygraph.variant" for VAR_TYPE_BLOCK, VarBlock
import "citygen" for ParcelsOBB, ParcelsSS
import "maths.vector" for Vector3

class Parcels is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "blocks", VAR_TYPE_ARRAY),
		]
		this.exports = [
			Pin(this, "blocks", VAR_TYPE_ARRAY),
		]

		this.params.add(NodeParam("max_len", 0.1, { "region" : 0.2 }))
		this.params.add(NodeParam("seed", 0))

		this.layout()
	}

	calc_value(idx)
	{
		var v_polys = Blueprint.calc_input_value(this, 0)
		var all_polys = Utility.list_flatten(v_polys)
		return this.build_blocks(all_polys)
	}

	build_blocks(blocks)
	{
		var ret = []

		var max_len = this.query_param("max_len").value
		var seed = this.query_param("seed").value

		for (var block in blocks)
		{
			var parcels = ParcelsOBB.init(block.value.poly)
//			var parcels = ParcelsSS.init(block.value.poly)			
			parcels.set_seed(seed)
			parcels.build(max_len)

			var polygons = parcels.get_polygons()
			for (var polygon in polygons)
			{
				var geo = VarBlock(polygon, block.value.type)
				ret.add(Variant(VAR_TYPE_BLOCK, geo))
			}			
		}

		return Variant(ret)
	}
}