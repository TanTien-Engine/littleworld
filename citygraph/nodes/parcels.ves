import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "citygraph.variant" for VAR_TYPE_STREETS, VAR_TYPE_LOTS
import "citygraph.streets_helper" for StreetsHelper
import "citygen" for ParcelsOBB, ParcelsSS
import "geometry" for Polygon
import "maths.vector" for Vector3

class Parcels is Node
{
	init()
	{
		super.init()
	
		this.imports = [
			Pin(this, "streets", VAR_TYPE_STREETS)
		]
		this.exports = [
			Pin(this, "lots", VAR_TYPE_LOTS),
		]

		this.params.add(NodeParam("max_len", 0.1, { "region" : 0.2 }))
		this.params.add(NodeParam("seed", 0))

		this.layout()

		this.parcels = nil
		this.v_polygons = nil
	}

	on_node_dirty()
	{
		this.parcels = nil
		this.v_polygons = nil
	}

	calc_value(idx)
	{
		var v_streets = Blueprint.calc_input_value(this, 0)
		if (!v_streets) {
			return nil
		}

		if (!this.parcels) {
			this.rebuild_parcels(v_streets.value)
		}
		if (!this.v_polygons) {
			this.rebuild_polygons()
		}

		return this.v_polygons
	}

	rebuild_parcels(v_streets)
	{
		this.parcels = []

		var v_polygons = StreetsHelper.build_polygons(v_streets)

		var max_len = this.query_param("max_len").value
		var seed = this.query_param("seed").value
		for (var item in v_polygons.value) 
		{
			var _parcels = ParcelsOBB.init(item.value.shape)
//			var _parcels = ParcelsSS.init(item.value.shape)			
			_parcels.set_seed(seed)
			_parcels.build(max_len)

			this.parcels.add(_parcels)
		}
	}

	rebuild_polygons()
	{
		var dst_polys = []

		for (var parcel in this.parcels)
		{
			var src_polys = parcel.get_polygons()

			for (var src_poly in src_polys)
			{
				var dst_poly = Polygon.init()
				dst_poly.set_vertices(src_poly)

				var geo = VarGeo()
				geo.shape = dst_poly
				geo.render_style["color"] = Vector3(0, 0, 0)
				geo.render_style["fill"] = false

				dst_polys.add(Variant(VAR_TYPE_GEO, geo))
			}
		}

		this.v_polygons = Variant(dst_polys)
	}
}