import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geometry" for Geometry
import "maths.vector" for Vector2, Vector3
import "geometry" for PolyPoint, PolyFace, Polytope
import "maths" for Matrix44

class PrimitiveQuad is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("size", Vector2(1, 1)))

		this.layout()
	}

	calc_value(idx)
	{
		var pos = Vector3(0, 0, 0)
		var size = this.query_param("size").value

		var xmin = pos.x
		var xmax = pos.x + size.x
		var zmin = pos.z
		var zmax = pos.z + size.y
		var y = 0

		var points = []
		points.add(PolyPoint.init([ xmin, y, zmin ]))
		points.add(PolyPoint.init([ xmin, y, zmax ]))
		points.add(PolyPoint.init([ xmax, y, zmax ]))
		points.add(PolyPoint.init([ xmax, y, zmin ]))

		var face = PolyFace.init([ 0, 1, 2, 3 ], [])
		var poly = Polytope.init(points, [ face ])

	    var geo = Geometry([ poly ])
		geo.scope = this.calc_scope_mat(size)

		return Variant(VAR_TYPE_GEOMETRY, geo)
	}

	calc_scope_mat(size)
	{
		var mat = Matrix44.init()

		mat.from_vectors([0, 0, 1], [0, 1, 0])
		mat.scale(size.x, 1.0, size.y)

		return mat	
	}
}