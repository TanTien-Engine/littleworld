import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_SCOPE, VarScope
import "archgraph.geometry" for Geometry
import "geometry" for PolyPoint, PolyFace, Polytope
import "maths" for Plane
import "maths.vector" for Vector2

class PrimitiveQuad is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "scope", VAR_TYPE_SCOPE),			
		]
		this.exports = [
			Pin(this, "geo",   VAR_TYPE_GEOMETRY),
			Pin(this, "scope", VAR_TYPE_SCOPE),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var pos = Vector2(0, 0)
		var size = Vector2(1, 1)

		var v_scope = Blueprint.calc_input_value(this, 0)
		if (v_scope) 
		{
			var s = v_scope.value
			pos.set(s.x, s.y)
			size.set(s.w, s.h)
		}

		if (size.x <= 0 or size.y <= 0) {
			return nil
		}

		if (idx == 0)
		{
			var hx = size.x * 0.5
			var hz = size.y * 0.5

			var xmin = pos.x - hx
			var xmax = pos.x + hx
			var zmin = pos.y - hz
			var zmax = pos.y + hz
			var y = 0

			var points = []
			points.add(PolyPoint.init([ xmin, y, zmin ]))
			points.add(PolyPoint.init([ xmin, y, zmax ]))
			points.add(PolyPoint.init([ xmax, y, zmax ]))
			points.add(PolyPoint.init([ xmax, y, zmin ]))

			var face = PolyFace.init([ 0, 1, 2, 3 ], [])
			var poly = Polytope.init(points, [ face ])

		    var geo = Geometry([ poly ])
			return Variant(VAR_TYPE_GEOMETRY, geo)
		}
		else if (idx == 1)
		{
			var scope = VarScope(pos.x, pos.y, size.x, size.y)
			return Variant(VAR_TYPE_SCOPE, scope)
		}

		return nil
	}
}