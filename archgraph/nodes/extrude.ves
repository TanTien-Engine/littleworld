import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geometry" for Geometry

class Extrude is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("distance", 0.0))

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}

		var distance = this.query_param("distance").value

		return this.extrude(v_geo, distance)
	}

	extrude(v_geo, distance)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			var geos = []
			for (var v in v_geo.value) {
				geos.add(this.extrude(v, distance))
			}
			return Variant(geos)
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			var polys = []

			var mesh = v_geo.value.mesh
			for (var poly in mesh.polys) 
			{
				var new_poly = poly.clone()
				new_poly.extrude(distance)
				polys.add(new_poly)
			}

			var geo = Geometry(polys)
			return Variant(VAR_TYPE_GEOMETRY, geo)
		}
	}
}