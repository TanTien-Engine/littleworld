import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.utility" for Utility

class FlipScopeNormal is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var in_geo = Blueprint.calc_input_value(this, 0)
		if (!in_geo) {
			return nil
		}

		var out_geo = Utility.clone_geo(in_geo)
		this.flip_geo_normal(out_geo)
		
		return out_geo
	}

	flip_geo_normal(v_geo)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geo.value) {
				this.flip_geo_normal(geo)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			var geo = v_geo.value
			for (var poly in geo.mesh.polys) 
			{ 
				var faces = poly.get_faces()
				if (!faces.isEmpty) 
				{
					var face = faces.front().clone()
					face.flip_normal()
					geo.scope = Utility.calc_scope_mat(poly, face)
				}
			}
		}
	}	
}