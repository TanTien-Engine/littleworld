import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_PIN
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geo_helper" for GeoHelper
import "maths.vector" for Vector3
import "maths" for Matrix44

class RotateScope is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
			Pin(this, "x", [ VAR_TYPE_NUMBER, VAR_TYPE_PIN ]),
			Pin(this, "y", [ VAR_TYPE_NUMBER, VAR_TYPE_PIN ]),
			Pin(this, "z", [ VAR_TYPE_NUMBER, VAR_TYPE_PIN ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("r", Vector3(0, 0, 0)))
		this.params.add(NodeParam("anchor", "left", { "combo" : [ "left", "right", "center" ] }))
		this.layout()
	}

	calc_value(idx)
	{
		var in_geo = Blueprint.calc_input_value(this, 0)
		if (!in_geo) {
			return nil
		}

		var out_geo = GeoHelper.clone_geo(in_geo)

		var r = nil
		if (!this.is_input_lazy_eval()) {
			r = this.calc_input_val()
		}

		var anchor = this.query_param("anchor").value

		this.rotate_scope(out_geo, r, anchor)

		return out_geo
	}

	rotate_scope(v_geo, r, anchor)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geo.value) {
				this.rotate_scope(geo, r, anchor)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			if (v_geo.value.scope) 
			{
				if (!r) {
					r = this.calc_input_val()
				}

				var mat = Matrix44.init()

				if (anchor == "left")
				{
					mat.rotate(r.x, r.y, r.z)
				}
				else if (anchor == "right")
				{
					mat.translate(-1, 0, 0)
					mat.rotate(r.x, r.y, r.z)
					mat.translate(1, 0, 0)
				}
				else if (anchor == "center")
				{
					mat.translate(-0.5, 0, 0)
					mat.rotate(r.x, r.y, r.z)
					mat.translate(0.5, 0, 0)
				}

				mat.transform_mat4(v_geo.value.scope)

				v_geo.value.scope = mat
			}
		}
	}


	is_input_lazy_eval()
	{
		for (var i in 1..this.imports.count) {
			var v = Blueprint.calc_input_value(this, i)
			if (v and v.type == VAR_TYPE_PIN) {
				return true
			}
		}
		return false
	}

	calc_input_val(name)
	{
		var v = Blueprint.calc_input_value(this, name)
		if (v)
		{
			if (v.type == VAR_TYPE_PIN)
			{
				var pin = v.value
				v = Blueprint.calc_input_value(pin.node, pin.slot_idx)
			}
		}

		if (v) {
			return v.value
		} else {
			return nil
		}
	}

	calc_input_val()
	{
		var r = this.query_param("r").value

		var x = this.calc_input_val("x")
		if (x) {
			r.x = x
		}

		var y = this.calc_input_val("y")
		if (y) {
			r.y = y
		}
		
		var z = this.calc_input_val("z")
		if (z) {
			r.z = z
		}

		return r
	}	
}