import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.variant_helper" for VariantHelper
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgen" for ArchTools
import "maths" for Matrix44, Maths
import "math" for Math

class Insert is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
			Pin(this, "pos", VAR_TYPE_GEOMETRY),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}

		var v_pos = Blueprint.calc_input_value(this, 1)
		if (!v_pos) {
			return nil
		}

		var geos = []

		var aabb = v_geo.value.mesh.aabb
		var positions = VariantHelper.flatten_values(v_pos, VAR_TYPE_GEOMETRY)
		for (var pos in positions)
		{
			if (pos.scope)
			{
				var geo = v_geo.value.clone()
				geo.trans.transform_mat4(ArchTools.calc_geo_mat(aabb, pos.scope))
				geos.add(Variant(VAR_TYPE_GEOMETRY, geo))
			}
		}

		if (geos.count > 1) {
			return Variant(VAR_TYPE_ARRAY, geos)
		} else if (geos.count == 1) {
			return geos[0]
		} else {
			return nil
		}
	}
}