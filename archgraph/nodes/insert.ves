import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.variant_helper" for VariantHelper
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "maths" for Matrix44, Maths
import "math" for Math

class Insert is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
			Pin(this, "pos", VAR_TYPE_GEOMETRY),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}

		var v_pos = Blueprint.calc_input_value(this, 1)
		if (!v_pos) {
			return nil
		}

		var aabb = v_geo.value.mesh.aabb
		var size = aabb.get_size()

		var geos = []

		var positions = VariantHelper.flatten_values(v_pos, VAR_TYPE_GEOMETRY)
		for (var pos in positions)
		{
			var sc = pos.scope

			var scale_x = sc.x.length() / size[0]
			var scale_y = sc.y.length() / size[1]			
			var scale_z = sc.x.length() / size[2]
			var scale = Math.min(scale_x, Math.min(scale_y, scale_z))

			var rot_mat = Maths.calc_rot_mat([ 1, 0, 0 ], [ sc.x.x, sc.x.y, sc.x.z ])

			var center = sc.get_center()

			var mat = Matrix44.init()
			mat.scale(scale, scale, scale)
			mat.transform_mat4(rot_mat)
			mat.translate(center.x, center.y, center.z)

			var geo = v_geo.value.new_instance()
			geo.trans = mat

			geos.add(Variant(VAR_TYPE_GEOMETRY, geo))			
		}

		if (geos.count > 1) {
			return Variant(VAR_TYPE_ARRAY, geos)
		} else if (geos.count == 1) {
			return geos[0]
		} else {
			return nil
		}
	}
}