import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_PIN
import "blueprint.variant_helper" for VariantHelper
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgen" for ScopeTools
import "maths" for Matrix44, Maths
import "math" for Math

class Insert is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY, VAR_TYPE_PIN ]),
			Pin(this, "pos", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}

		var v_pos = Blueprint.calc_input_value(this, 1)
		if (!v_pos) {
			return nil
		}

		var positions = VariantHelper.flatten_values(v_pos, VAR_TYPE_GEOMETRY)

		var geos = []
		if (v_geo.type == VAR_TYPE_PIN)
		{
			for (var pos in positions)
			{
				if (pos.scope)
				{
					var pin = v_geo.value
					var v_geo_real = Blueprint.calc_input_value(pin.node, pin.slot_idx)
					var in_geos = VariantHelper.flatten_values(v_geo_real, VAR_TYPE_GEOMETRY)
					this.insert_geos(geos, in_geos, pos)
				}
			}
		}
		else
		{
			var in_geos = VariantHelper.flatten_values(v_geo, VAR_TYPE_GEOMETRY)
			for (var pos in positions) {
				if (pos.scope) {
					this.insert_geos(geos, in_geos, pos)
				}
			}
		}

		if (geos.count > 1) {
			return Variant(VAR_TYPE_ARRAY, geos)
		} else if (geos.count == 1) {
			return geos[0]
		} else {
			return nil
		}
	}

	insert_geos(dst_geos, src_geos, pos)
	{
		for (var geo in src_geos)
		{
			var aabb = geo.mesh.aabb
			var new = geo.clone()
			new.trans.transform_mat4(ScopeTools.calc_insert_mat(aabb, geo.trans, pos.scope))
			dst_geos.add(Variant(VAR_TYPE_GEOMETRY, new))
		}
	}
}