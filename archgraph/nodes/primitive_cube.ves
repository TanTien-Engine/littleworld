import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geometry" for Geometry
import "maths.vector" for Vector3
import "geometry" for PolyFace, Polytope
import "maths" for Plane

class PrimitiveCube is Node
{
	init()
	{
		super.init()

		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("size", Vector3(1, 1, 1)))

		this.layout()
	}

	calc_value(idx)
	{
		var pos = Vector3(0, 0, 0)
		var size = this.query_param("size").value

		var xmin = pos.x
		var xmax = pos.x + size.x
		var ymin = pos.y
		var ymax = pos.y + size.y
		var zmin = pos.z
		var zmax = pos.z + size.z

    	var top_left_front  = [ xmin, ymax, zmin ]
    	var top_left_back   = [ xmin, ymax, zmax ]
    	var top_right_front = [ xmax, ymax, zmin ]
    	var top_right_back  = [ xmax, ymax, zmax ]
    	var btm_left_front  = [ xmin, ymin, zmin ]
    	var btm_left_back   = [ xmin, ymin, zmax ]
    	var btm_right_front = [ xmax, ymin, zmin ]
    	var btm_right_back  = [ xmax, ymin, zmax ]

    	var faces = []

	    var top = Plane.init(top_left_front, top_left_back, top_right_back)
	    faces.add(PolyFace.init(top))

	    var bottom = Plane.init(btm_left_front, btm_right_front, btm_right_back)
	    faces.add(PolyFace.init(bottom))

	    var left = Plane.init(top_left_back, top_left_front, btm_left_front)
	    faces.add(PolyFace.init(left))

	    var right = Plane.init(top_right_front, top_right_back, btm_right_back)
	    faces.add(PolyFace.init(right))

	    var front = Plane.init(top_left_front, top_right_front, btm_right_front)
	    faces.add(PolyFace.init(front))

	    var back = Plane.init(top_right_back, top_left_back, btm_left_back)
	    faces.add(PolyFace.init(back))

	    var poly = Polytope.init(faces)

	    var geo = Geometry([ poly ])
		return Variant(VAR_TYPE_GEOMETRY, geo)
	}
}