import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geometry" for Geometry
import "archgraph.utility" for Utility
import "maths.vector" for Vector3
import "archgen" for ScopeTools
import "geometry" for Polytope, PolyPoint, PolyFace
import "maths" for Matrix44, Maths
import "math" for Math

class Comp is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]
		this.exports = [
			Pin(this, "front",  VAR_TYPE_GEOMETRY),
			Pin(this, "back",   VAR_TYPE_GEOMETRY),
			Pin(this, "left",   VAR_TYPE_GEOMETRY),
			Pin(this, "right",  VAR_TYPE_GEOMETRY),
			Pin(this, "top",    VAR_TYPE_GEOMETRY),
			Pin(this, "bottom", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("selector", "face6", { "combo" : [ "face6", "normal_y", "side", "edges", "face_edges" ] }))

		this.layout()
	}

	on_param_dirty()
	{
		super.on_param_dirty()

		for (var p in this.exports) {
			while (!p.conns.isEmpty) {
				Blueprint.disconnect(p.conns.front())
			}
		}

		this.exports.clear()

		var selector = this.query_param("selector").value
		if (selector == "face6") 
		{
			this.exports.add(Pin(this, "front",  VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "back",   VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "left",   VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "right",  VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "top",    VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "bottom", VAR_TYPE_GEOMETRY))			
		}
		else if (selector == "normal_y")
		{
			this.exports.add(Pin(this, "vertical",   VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "horizontal", VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "aslant",     VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "nutant",     VAR_TYPE_GEOMETRY))			
		}
		else if (selector == "side")
		{
			this.exports.add(Pin(this, "side",   VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "border", VAR_TYPE_GEOMETRY))
			this.exports.add(Pin(this, "inside", VAR_TYPE_GEOMETRY))
		}
		else if (selector == "edges")
		{
			this.exports.add(Pin(this, "all", VAR_TYPE_GEOMETRY))
		}
		else if (selector == "face_edges")
		{
			this.exports.add(Pin(this, "all", VAR_TYPE_GEOMETRY))
		}

		this.layout()
	}

	to_string(name) 
	{
		return super.to_string(name) + "
%(name).on_param_dirty()
"
	}

	calc_value(idx)
	{
		var children = this.build_children()
		if (!children) {
			return nil
		}

		var geos = children[idx]
		if (geos.count == 1) {
			return geos[0]
		} else {
			return Variant(VAR_TYPE_ARRAY, geos)
		}
	}

	build_children()
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}

		var ret = []

		var selector = this.query_param("selector").value
		if (selector == "face6") 
		{
			for (var i in 0..6) {
				ret.add([])
			}

			var normals = []
			normals.add(Vector3( 0,  0,  1))
			normals.add(Vector3( 0,  0, -1))
			normals.add(Vector3( 1,  0,  0))
			normals.add(Vector3(-1,  0,  0))
			normals.add(Vector3( 0,  1,  0))
			normals.add(Vector3( 0, -1,  0))

			for (var poly in v_geo.value.mesh.polys) 
			{
				var faces6 = []
				for (var i in 0..6) {
					faces6.add([])
				}

				for (var face in poly.get_faces()) 
				{
					var norm = face.get_normal()

					var min_idx = -1
					var min_ang = Math.pi()
					for (var i in 0..6)
					{
						var angle = Maths.calc_angle([0, 0, 0], norm, [ normals[i].x, normals[i].y, normals[i].z ])
						if (angle < min_ang) {
							min_idx = i
							min_ang = angle
						}
					}

					faces6[min_idx].add(face)
				}

				var points = poly.get_points()
				for (var i in 0 .. faces6.count) {
					if (!faces6[i].isEmpty) {
						this.create_face_children(ret[i], points, faces6[i])
					}
				}
			}
		}
		else if (selector == "normal_y")
		{
			for (var i in 0..4) {
				ret.add([])
			}

			for (var poly in v_geo.value.mesh.polys) 
			{
				var faces4 = []
				for (var i in 0..4) {
					faces4.add([])
				}

				for (var face in poly.get_faces()) 
				{
					var angle = this.calc_normal_y_angle(face)
					var EPSILON = 0.0001
			        if (angle > 78.75 and angle < 90 + EPSILON) {
			        	faces4[1].add(face)
			        } else if (angle > 11.25 and angle <= 78.75) {
			        	faces4[2].add(face)
			        } else if (angle > -11.25 and angle <= 11.25) {
			        	faces4[0].add(face)
			        } else if (angle > -78.75 and angle <= -11.25) {
			        	faces4[3].add(face)
			        } else if (angle > -90 - EPSILON and angle <= -78.75) {
			        	faces4[1].add(face)
			        }
				}

				var points = poly.get_points()
				for (var i in 0 .. faces4.count) {
					if (!faces4[i].isEmpty) {
						this.create_face_children(ret[i], points, faces4[i])
					}
				}
			}
		}
		else if (selector == "side")
		{
			for (var i in 0..3) {
				ret.add([])
			}

			for (var poly in v_geo.value.mesh.polys) 
			{
				var faces3 = []
				for (var i in 0..3) {
					faces3.add([])
				}

				for (var face in poly.get_faces()) 
				{
					var angle = this.calc_normal_y_angle(face)
					if (angle > -78.75 and angle < 78.75) 
					{
						faces3[0].add(face)
						if (poly.is_face_inside(face)) {
							faces3[2].add(face)
						} else {
							faces3[1].add(face)						
						}
					}
				}

				var points = poly.get_points()
				for (var i in 0 .. faces3.count) {
					if (!faces3[i].isEmpty) {
						this.create_face_children(ret[i], points, faces3[i])
					}
				}
			}
		}
		else if (selector == "edges")
		{
			var children = []

			for (var poly in v_geo.value.mesh.polys) 
			{
				var mats = ScopeTools.comp_edges(poly)
				var v_geos = this.create_edge_children(mats)
				for (var v in v_geos) {
					children.add(v)
				}
			}

			ret.add(children)
		}
		else if (selector == "face_edges")
		{
			var children = []

			for (var poly in v_geo.value.mesh.polys) 
			{
				var mats = ScopeTools.comp_face_edges(poly)
				var v_geos = this.create_edge_children(mats)
				for (var v in v_geos) {
					children.add(v)
				}
			}

			ret.add(children)
		}

		return ret
	}

	calc_normal_y_angle(face)
	{
		var norm = face.get_normal()
		var angle = Math.asin(norm[1]) * 180 / Math.pi()
		return angle
	}

	create_edge_children(scope_mats)
	{
		var children = []

		for (var mat in scope_mats)
		{
			var geo = Geometry([])
			geo.scope = mat
			children.add(Variant(VAR_TYPE_GEOMETRY, geo))
		}

		return children
	}

	create_face_children(children, _points, faces)
	{
		for (var _face in faces) 
		{
			var border = _face.get_border()
			var holes = _face.get_holes()

			var points = []
			for (var i in border) {
				points.add(PolyPoint.init(_points[i].get_pos()))
			}
			for (var hole in holes) {
				for (var i in hole) {
					points.add(PolyPoint.init(_points[i].get_pos()))
				}
			}

			var border_idx = []
			var curr_idx = 0
			for (var i in border) {
				border_idx.add(curr_idx)
				curr_idx = curr_idx + 1
			}

			var holes_idx = []
			for (var hole in holes) 
			{
				var idx = []
				for (var i in hole) {
					idx.add(curr_idx)
					curr_idx = curr_idx + 1
				}
				holes_idx.add(idx)
			}

			var face = PolyFace.init(border_idx, holes_idx)
			var poly = Polytope.init(points, [ face ])

			var geo = Geometry([ poly ])
			geo.scope = Utility.calc_scope_mat(poly, face)

			var v_geo = Variant(VAR_TYPE_GEOMETRY, geo)
			children.add(v_geo)
		}
	}
}