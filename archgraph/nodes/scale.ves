import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER3
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.utility" for Utility
import "maths.vector" for Vector3

class Scale is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
			Pin(this, "s", VAR_TYPE_NUMBER3),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("s", Vector3(1, 1, 1)))

		this.layout()
	}

	calc_value(idx)
	{
		var in_geo = Blueprint.calc_input_value(this, 0)
		if (!in_geo) {
			return nil
		}

		var out_geo = Utility.clone_geo(in_geo)

		var s = this.query_param("s").value
		var v_s = Blueprint.calc_input_value(this, "s")
		if (v_s) {
			s = v_s.value
		}

		this.scale_geo(out_geo, s)
		
		return out_geo
	}

	scale_geo(v_geo, s)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geo.value) {
				this.scale_geo(geo, s)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			v_geo.value.trans.scale(s.x, s.y, s.z)
		}
	}
}