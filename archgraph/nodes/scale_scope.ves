import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_PIN
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_SRT_VALUE
import "archgraph.utility" for Utility
import "maths.vector" for Vector3
import "maths" for Matrix44
import "archgen" for ScopeTools

class ScaleScope is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
			Pin(this, "x", [ VAR_TYPE_NUMBER, VAR_TYPE_SRT_VALUE, VAR_TYPE_PIN ]),
			Pin(this, "y", [ VAR_TYPE_NUMBER, VAR_TYPE_SRT_VALUE, VAR_TYPE_PIN ]),
			Pin(this, "z", [ VAR_TYPE_NUMBER, VAR_TYPE_SRT_VALUE, VAR_TYPE_PIN ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("s", Vector3(1, 1, 1)))
		this.params.add(NodeParam("anchor", "left", { "combo" : [ "left", "right", "center" ] }))

		this.layout()
	}

	calc_value(idx)
	{
		var in_geo = Blueprint.calc_input_value(this, 0)
		if (!in_geo) {
			return nil
		}

		var out_geo = Utility.clone_geo(in_geo)

		var s = nil
		if (!this.is_input_lazy_eval()) {
			s = this.calc_input_scale(in_geo)
		}

		var anchor = this.query_param("anchor").value

		this.scale_scope(out_geo, s, anchor)

		return out_geo
	}

	scale_scope(v_geo, s, anchor)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geo.value) {
				this.scale_scope(geo, s, anchor)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			if (v_geo.value.scope) 
			{
				if (!s) {
					s = this.calc_input_scale(v_geo)
				}

				var mat = Matrix44.init()

				mat.scale(s.x, s.y, s.z)

				if (anchor == "right")
				{
					var dx = - (s.x - 1.0)
					mat.translate(dx, 0, 0)
				}
				else if (anchor == "center")
				{
					var dx = - (s.x - 1.0) * 0.5
					mat.translate(dx, 0, 0)
				}

				mat.transform_mat4(v_geo.value.scope)

				v_geo.value.scope = mat
			}
		}
	}

	is_input_lazy_eval()
	{
		for (var i in 1..this.imports.count) {
			var v = Blueprint.calc_input_value(this, i)
			if (v and v.type == VAR_TYPE_PIN) {
				return true
			}
		}
		return false
	}

	calc_input_scale(idx, scope_sizes)
	{
		var v = Blueprint.calc_input_value(this, idx + 1)
		if (!v) {
			return nil
		}

		if (v.type == VAR_TYPE_PIN)
		{
			var pin = v.value
			v = Blueprint.calc_input_value(pin.node, pin.slot_idx)
			return v.value
		}
		else if (v.type == VAR_TYPE_SRT_VALUE)
		{
			if (v.value.absolute)
			{
				if (scope_sizes) 
				{
					var ret = v.value.value
					if (v.value.offset) {
						ret = ret + scope_sizes[idx]
					}
					ret = ret / scope_sizes[idx]
					return ret
				}
			}
			else
			{
				if (v.value.offset) {
					return v.value.value
				} else {
					return v.value.value + 1
				}
			}
		}
		else
		{
			return v.value
		}

		return nil
	}

	calc_input_scale(v_geo)
	{
		var scope_sizes = nil
		if (v_geo.value.scope) {
			scope_sizes = ScopeTools.get_scope_size(v_geo.value.scope)
		}

		var s = this.query_param("s").value.clone()

		var x = this.calc_input_scale(0, scope_sizes)
		if (x) {
			s.x = x
		}

		var y = this.calc_input_scale(1, scope_sizes)
		if (y) {
			s.y = y
		}
		
		var z = this.calc_input_scale(2, scope_sizes)
		if (z) {
			s.z = z
		}

		return s
	}	
}