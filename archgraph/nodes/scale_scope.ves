import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geo_helper" for GeoHelper
import "maths.vector" for Vector3
import "archgen" for ScopeTools
import "maths" for Matrix44

class ScaleScope is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
			Pin(this, "x", VAR_TYPE_NUMBER),
			Pin(this, "y", VAR_TYPE_NUMBER),
			Pin(this, "z", VAR_TYPE_NUMBER),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("s", Vector3(1, 1, 1)))
		this.params.add(NodeParam("anchor", "left", { "combo" : [ "left", "right", "center" ] }))

		this.layout()
	}

	calc_value(idx)
	{
		var in_geo = Blueprint.calc_input_value(this, 0)
		if (!in_geo) {
			return nil
		}

		var out_geo = GeoHelper.clone_geo(in_geo)

		var s = this.query_param("s").value

		var v_x = Blueprint.calc_input_value(this, "x")
		if (v_x) {
			s.x = v_x.value
		}
		var v_y = Blueprint.calc_input_value(this, "y")
		if (v_y) {
			s.y = v_y.value
		}
		var v_z = Blueprint.calc_input_value(this, "z")
		if (v_z) {
			s.z = v_z.value
		}	

		var anchor = this.query_param("anchor").value

		this.scale_scope(out_geo, s, anchor)

		return out_geo
	}

	scale_scope(v_geo, s, anchor)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geo.value) {
				this.scale_scope(geo, s, anchor)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			if (v_geo.value.scope) 
			{
				var mat = Matrix44.init()

				mat.scale(s.x, s.y, s.z)

				if (anchor == "right")
				{
					var sz_x = ScopeTools.get_scope_size(v_geo.value.scope)[0]
					var dx = - (s.x - 1.0) * sz_x
					mat.translate(dx, 0, 0)
				}
				else if (anchor == "center")
				{
					var sz_x = ScopeTools.get_scope_size(v_geo.value.scope)[0]
					var dx = - (s.x - 1.0) * 0.5 * sz_x
					mat.translate(dx, 0, 0)				
				}

				mat.transform_mat4(v_geo.value.scope)

				v_geo.value.scope = mat
			}
		}
	}
}