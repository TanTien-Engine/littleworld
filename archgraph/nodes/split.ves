import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.node_helper" for NodeHelper
import "blueprint.blueprint" for Blueprint
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_PIN
import "blueprint.variant_helper" for VariantHelper
import "archgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_SPLIT_SIZE
import "archgraph.geometry" for Geometry
import "maths.vector" for Vector3
import "archgen" for ScopeTools
import "geometry" for PolyPoint, PolyFace, Polytope
import "math" for Math
import "maths" for Matrix44, Float3

var CHILD_IDX_OFFSET = 1
var MAX_FLOAT_SIZE = 65535

class SplitRect
{
	init(x, y, w, h)
	{
		this.x = x
		this.y = y
		this.w = w
		this.h = h
	}
}

class Split is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "parent", VAR_TYPE_GEOMETRY),
			Pin(this, "size0",  VAR_TYPE_SPLIT_SIZE),
			Pin(this, "size1",  VAR_TYPE_SPLIT_SIZE),
		]
		this.exports = [
			Pin(this, "child0", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
			Pin(this, "child1", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("axis", "hori", { "combo" : [ "hori", "vert" ] }))
		this.params.add(NodeParam("repeat", false))

		this.layout()
	}

	calc_value(idx)
	{
		var children = this.build_children()
		if (!children) {
			return nil
		}

		var geos = children[idx]
		if (geos.count > 1) {
			return Variant(VAR_TYPE_ARRAY, geos)
		} else if (geos.count == 1) {
			return geos[0]
		} else {
			return nil
		}
	}

	on_connected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, CHILD_IDX_OFFSET, "size", VAR_TYPE_GEOMETRY)
			this.dynamic_exports_update()
		}
	}

	on_disconnected(pin)
	{
		if (pin.is_input) {
			NodeHelper.dynamic_imports_update(this, CHILD_IDX_OFFSET, "size", VAR_TYPE_GEOMETRY)
			this.dynamic_exports_update()
		}
	}

	build_children()
	{
		var children = []
		for (var i in 0 .. this.exports.count) {
			children.add([])
		}

		var v_geo = Blueprint.calc_input_value(this, 0)
		if (v_geo)
		{
			var in_geos = VariantHelper.flatten_values(v_geo, VAR_TYPE_GEOMETRY)
			for (var geo in in_geos) 
			{
				var rects = this.build_rects(geo.scope)
				for (var i in 0 .. rects.count) {
					for (var r in rects[i]) {
						children[i].add(this.create_geo(r, geo.scope))
					}
				}
			}
		}
		else
		{
			var scope_mat = Matrix44.init()			
			scope_mat.from_vectors([0, 0, 1], [0, 1, 0])

			var rects = this.build_rects(scope_mat)

			for (var i in 0 .. rects.count) {
				for (var r in rects[i]) {
					children[i].add(this.create_geo(r, scope_mat))
				}
			}
		}

		return children
	}	

	build_rects(scope_mat)
	{
		var o_pos = Float3.init(0, 0, 0)
		o_pos.transform(scope_mat)

		var x_axis = Float3.init(1, 0, 0)
		x_axis.transform(scope_mat)

		var y_axis = Float3.init(0, 1, 0)
		y_axis.transform(scope_mat)

		var o_pos_v3 = Vector3(o_pos.x(), o_pos.y(), o_pos.z())
		var x_len = Vector3(x_axis.x(), x_axis.y(), x_axis.z()).sub(o_pos_v3).length()
		var y_len = Vector3(y_axis.x(), y_axis.y(), y_axis.z()).sub(o_pos_v3).length()

		var rects = this.build_rects(x_len, y_len)
		for (var i in 0 .. rects.count) {
			for (var r in rects[i]) {
				r.x = r.x / x_len
				r.y = r.y / y_len
				r.w = r.w / x_len
				r.h = r.h / y_len
			}
		}

		return rects
	}

	calc_src_sizes()
	{
		var src_sizes = []

		for (var i in 1..this.imports.count)
		{
			var v_size = Blueprint.calc_input_value(this, i)
			if (v_size and v_size.value) {
				if (v_size.type == VAR_TYPE_PIN) {
					var pin = v_size.value
					v_size = Blueprint.calc_input_value(pin.node, pin.slot_idx)
				} 
				src_sizes.add(v_size.value)				
			}
		}

		return src_sizes
	}

	is_input_lazy_eval()
	{
		for (var i in 1..this.imports.count)
		{
			var v_size = Blueprint.calc_input_value(this, i)
			if (v_size and v_size.type == VAR_TYPE_PIN) {
				return true
			}
		}
		return false
	}

	build_rects(width, height)
	{
		var src_sizes = nil
		if (!this.is_input_lazy_eval()) {
			src_sizes = this.calc_src_sizes()		
		}

		var rects = []

		var axis = this.query_param("axis").value

		var dst_sizes = nil
		if (axis == "hori") {
			dst_sizes = this.calc_sizes(src_sizes, width)
		} else {
			dst_sizes = this.calc_sizes(src_sizes, height)
		}

		if (dst_sizes.isEmpty) {
			return
		}

		var rect = SplitRect(0, 0, width, height)

		var MIN_SIZE = 0.0001

		for (var _ in dst_sizes) {
			rects.add([])
		}
		if (dst_sizes[0] is List)
		{
			if (axis == "hori")
			{
				var x = rect.x
				for (var i in 0..dst_sizes[0].count) {				
					for (var j in 0..dst_sizes.count) {
						var sz = dst_sizes[j][i]
						if (sz.size > MIN_SIZE) {
							var sr = SplitRect(x, rect.y, sz.size, rect.h)
							rects[j].add(sr)
						}
						x = x + sz.size
					}
				}
			}
			else
			{
				var y = rect.y
				for (var i in 0..dst_sizes[0].count) {
					for (var j in 0..dst_sizes.count) {
						var sz = dst_sizes[j][i]
						if (sz.size > MIN_SIZE) {
							var sr = SplitRect(rect.x, y, rect.w, sz.size)
							rects[j].add(sr)
						}
						y = y + sz.size
					}
				}
			}
		}
		else
		{
			if (axis == "hori")
			{
				var x = rect.x
				for (var i in 0 .. dst_sizes.count) 
				{
					var sz = dst_sizes[i]
					if (sz.size > MIN_SIZE) {
						var sr = SplitRect(x, rect.y, sz.size, rect.h)
						rects[i].add(sr)
					}
					x = x + sz.size
				}
			}
			else
			{
				var y = rect.y
				for (var i in 0 .. dst_sizes.count) 
				{
					var sz = dst_sizes[i]
					if (sz.size > MIN_SIZE) {
						var sr = SplitRect(rect.x, y, rect.w, sz.size)
						rects[i].add(sr)
					}
					y = y + sz.size
				}
			}
		}

		return rects
	}

	calc_sizes(src, tot)
	{
		var repeat = this.query_param("repeat").value
		if (repeat)
		{
			var src_sizes = src
			if (!src_sizes) {
				src_sizes = this.calc_src_sizes()
			}

			var sizes = []
			for (var _ in src_sizes) {
				sizes.add([])
			}

			var floating = false
			for (var sz in src_sizes) {
				if (sz.mode == "floating") {
					floating = true
				}
			}

			if (floating and src)
			{
				var dst = []
				var len = this.calc_sizes_single_layer(dst, src, tot, tot)
				var num = Math.ceil(tot / len)
				for (var i in 0..num)
				{
					var dst = []
					this.calc_sizes_single_layer(dst, src, tot / num, tot)
					for (var i in 0 .. dst.count) {
						sizes[i].add(dst[i])
					}
				}
			}
			else
			{
				var avaliable = tot
				while (avaliable > 0)
				{
					var dst = []
					var len = this.calc_sizes_single_layer(dst, src, avaliable, tot)
					for (var i in 0 .. dst.count) {
						sizes[i].add(dst[i])
					}

					avaliable = avaliable - len
				}
			}

			return sizes
		}
		else
		{
			var sizes = []
			this.calc_sizes_single_layer(sizes, src, tot, tot)
			return sizes
		}
	}

	calc_sizes_single_layer(dst, src, length, tot_len)
	{
		if (!src) {
			src = this.calc_src_sizes()
		}

		// prepare relative and floating values
		var floating_num = 0
		for (var sz in src) 
		{
			if (sz.mode == "absolute") 
			{
				dst.add(sz.size)
			} 
			else if (sz.mode == "relative") 
			{
				dst.add(sz.size * tot_len)
			} 
			else if (sz.mode == "floating") 
			{
				if (sz.size == 0) {
					sz.size = MAX_FLOAT_SIZE
				}
				dst.add(-sz.size)
				floating_num = floating_num + 1
			}
		}

		// calc floating
		if (floating_num > 0)
		{
			var avaliable = length
			var tot_floating = 0
			for (var sz in dst) 
			{
				if (sz.size > 0) {
					avaliable = avaliable - sz.size
				} else {
					tot_floating = tot_floating - sz.size
				}
			}
			if (avaliable > 0 and tot_floating > 0)
			{
				if (floating_num == 1)
				{
					for (var i in 0..dst.count) {
						if (dst[i] < 0) {
							var len = -dst[i]
							dst[i] = Math.min(len, avaliable)
						}
					}
				}
				else
				{
					for (var i in 0..dst.count) {
						if (dst[i] < 0) {
							var len = -dst[i]
							dst[i] = Math.min(len, avaliable * len / tot_floating)
						}
					}
				}
			}
			else
			{
				for (var i in 0..dst.count) {
					if (dst[i] < 0) {
						dst[i] = 0
					}
				}
			}
		}

		// trim sizes
		if (!dst.isEmpty)
		{
			var len = 0
			var idx = 0
			while (idx < dst.count and len + dst[idx] < length) {
				len = len + dst[idx]
				idx = idx + 1
			}

			if (idx < dst.count)
			{
				dst[idx] = length - len
				for (var i in idx + 1 .. dst.count) {
					dst[i] = 0
				}
			}
		}

		// calc tot len
		var len = 0
		for (var sz in dst) {
			len = len + sz.size
		}

		return len
	}

	dynamic_exports_update()
	{
		var num = 0
		for (var i in 1 .. this.imports.count) {
			if (!this.imports[i].conns.isEmpty) {
				num = num + 1
			}
		}
		while (this.exports.count > num) {
			this.exports.pop_back()
		}
		while (this.exports.count < num) {
			this.exports.add(Pin(this, "child%(this.exports.count)", VAR_TYPE_GEOMETRY))
		}

		this.layout()

		for (var port in this.exports) {
			for (var conn in port.conns) {
				conn.update()
			}
		}
	}

	create_geo(rect, scope_mat)
	{
		var xmin = rect.x
		var xmax = rect.x + rect.w
		var ymin = rect.y
		var ymax = rect.y + rect.h
		var z = 0

		var quad = []
		quad.add(Float3.init(xmin, ymin, z))
		quad.add(Float3.init(xmax, ymin, z))
		quad.add(Float3.init(xmax, ymax, z))		
		quad.add(Float3.init(xmin, ymax, z))
		for (var p in quad) {
			p.transform(scope_mat)
		}

		var points = []
		for (var p in quad) {
			points.add(PolyPoint.init([ p.x(), p.y(), p.z() ]))
		}

		var face = PolyFace.init([ 0, 1, 2, 3 ], [])
		var poly = Polytope.init(points, [ face ])

	    var geo = Geometry([ poly ])

	    var child_mat = Matrix44.init()
	    child_mat.scale(rect.w, rect.h, 1.0)
	    child_mat.translate(rect.x, rect.y, 0.0)

	    geo.scope = child_mat.clone()
	    geo.scope.transform_mat4(scope_mat)

		return Variant(VAR_TYPE_GEOMETRY, geo)
	}
}