import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.node_param" for NodeParam
import "blueprint.variant" for Variant, VAR_TYPE_ARRAY, VAR_TYPE_NUMBER, VAR_TYPE_PIN
import "blueprint.blueprint" for Blueprint
import "archgraph.variant" for VAR_TYPE_GEOMETRY, VAR_TYPE_SRT_VALUE
import "archgraph.utility" for Utility
import "maths.vector" for Vector3
import "maths" for Matrix44
import "archgen" for ScopeTools

class TranslateScope is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
			Pin(this, "x", [ VAR_TYPE_NUMBER, VAR_TYPE_SRT_VALUE, VAR_TYPE_PIN ]),
			Pin(this, "y", [ VAR_TYPE_NUMBER, VAR_TYPE_SRT_VALUE, VAR_TYPE_PIN ]),
			Pin(this, "z", [ VAR_TYPE_NUMBER, VAR_TYPE_SRT_VALUE, VAR_TYPE_PIN ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("t", Vector3(0, 0, 0)))

		this.layout()
	}

	calc_value(idx)
	{
		var in_geo = Blueprint.calc_input_value(this, 0)
		if (!in_geo) {
			return nil
		}

		var out_geo = Utility.clone_geo(in_geo)

		var t = nil
		if (!this.is_input_lazy_eval()) {
			t = this.calc_input_translate(in_geo)
		}

		this.translate_scope(out_geo, t)

		return out_geo
	}

	translate_scope(v_geo, t)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var geo in v_geo.value) {
				this.translate_scope(geo, t)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			if (v_geo.value.scope) 
			{
				if (!t) {
					t = this.calc_input_translate(v_geo)
				}

				var mat = Matrix44.init()
				mat.translate(t.x, t.y, t.z)
				mat.transform_mat4(v_geo.value.scope)

				v_geo.value.scope = mat
			}
		}
	}

	is_input_lazy_eval()
	{
		for (var i in 1..this.imports.count) {
			var v = Blueprint.calc_input_value(this, i)
			if (v and v.type == VAR_TYPE_PIN) {
				return true
			}
		}
		return false
	}

	calc_input_translate(idx, scope_sizes)
	{
		var v = Blueprint.calc_input_value(this, idx + 1)
		if (!v) {
			return nil
		}

		if (v.type == VAR_TYPE_PIN)
		{
			var pin = v.value
			v = Blueprint.calc_input_value(pin.node, pin.slot_idx)
			return v.value
		}
		else if (v.type == VAR_TYPE_SRT_VALUE)
		{
			if (v.value.absolute) {
				if (scope_sizes) {
					return v.value.value / scope_sizes[idx]
				}
			} else {
				return v.value.value
			}
		}
		else
		{
			return v.value
		}

		return nil
	}

	calc_input_translate(v_geo)
	{
		var scope_sizes = nil
		if (v_geo.value.scope) {
			scope_sizes = ScopeTools.get_scope_size(v_geo.value.scope)
		}

		var t = this.query_param("t").value

		var x = this.calc_input_translate(0, scope_sizes)
		if (x) {
			t.x = x
		}

		var y = this.calc_input_translate(1, scope_sizes)
		if (y) {
			t.y = y
		}
		
		var z = this.calc_input_translate(2, scope_sizes)
		if (z) {
			t.z = z
		}

		return t
	}
}