import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant, VAR_TYPE_NUMBER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgraph.geometry" for Geometry
import "archgen" for RoofExtrude

class Roof is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEOMETRY),
		]

		this.params.add(NodeParam("distance", 0.0))
		this.params.add(NodeParam("type", "hip", { "combo" : [ "hip", "pyramid", "shed", "gable"] }))
		this.params.add(NodeParam("idx", 0, { "region" : 10, "integer" : true }))

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}

		var mesh = v_geo.value.mesh
		if (mesh.polys.isEmpty) {
			return nil
		}

		var poly = mesh.polys.front()

		var distance = this.query_param("distance").value
		var type = this.query_param("type").value

		var roof = nil
		if (type == "hip") {
			roof = RoofExtrude.hip(poly, distance)
		} else if (type == "pyramid") {
			roof = RoofExtrude.pyramid(poly, distance)
		} else if (type == "shed") {
			var idx = this.query_param("idx").value			
			roof = RoofExtrude.shed(poly, distance, idx)
		} else if (type == "gable") {
			roof = RoofExtrude.gable(poly, distance)
		}

		if (!roof) {
			return nil
		}

	    var geo = Geometry([ roof ])
		return Variant(VAR_TYPE_GEOMETRY, geo)
	}
}