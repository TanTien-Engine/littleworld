import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for VAR_TYPE_ARRAY, VAR_TYPE_NUMBER
import "blueprint.blueprint" for Blueprint
import "blueprint.node_param" for NodeParam
import "archgraph.variant" for VAR_TYPE_GEOMETRY
import "archgen" for TextureMapping
import "maths.vector" for Vector2, Vector3

var BASE_AXES = [
    Vector3(1, 0, 0), Vector3(0, 1, 0),
    Vector3(1, 0, 0), Vector3(0, 0, 1),
    Vector3(0, 1, 0), Vector3(1, 0, 0),
    Vector3(0, 1, 0), Vector3(0, 0, 1),
    Vector3(0, 0, 1), Vector3(1, 0, 0),
    Vector3(0, 0, 1), Vector3(0, 1, 0)
]

class SetupProjection is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]
		this.exports = [
			Pin(this, "geo", [ VAR_TYPE_GEOMETRY, VAR_TYPE_ARRAY ]),
		]

		this.params.add(NodeParam("axes", "xy", { "combo" : [ "xy", "xz", "yx", "yz", "zx", "zy" ] }))
		this.params.add(NodeParam("scale", Vector2(1, 1)))
		this.params.add(NodeParam("offset", Vector2(0, 0)))
		this.params.add(NodeParam("uw_factor", 0.0))
		this.params.add(NodeParam("gpu", false))

		this.layout()
	}

	calc_value(idx)
	{
		var v_geo = Blueprint.calc_input_value(this, 0)
		if (!v_geo or !v_geo.value) {
			return nil
		}		
		
		var axes = this.query_param("axes").value
		var axes_idx = 0
		if (axes == "xy") {
			axes_idx = 0
		} else if (axes == "xz") {
			axes_idx = 1
		} else if (axes == "yx") {
			axes_idx = 2
		} else if (axes == "yz") {
			axes_idx = 3
		} else if (axes == "zx") {
			axes_idx = 4
		} else if (axes == "zy") {
			axes_idx = 5
		}

		var scale     = this.query_param("scale").value
		var offset    = this.query_param("offset").value
		var uw_factor = this.query_param("uw_factor").value
		var gpu       = this.query_param("gpu").value

		this.setup_proj(v_geo, axes_idx, scale, offset, uw_factor, gpu)

		return v_geo
	}

	setup_proj(v_geo, axes, scale, offset, uw_factor, gpu)
	{
		if (v_geo.type == VAR_TYPE_ARRAY)
		{
			for (var v in v_geo.value) {
				this.setup_proj(v, axes, scale, offset, uw_factor, gpu)
			}
		}
		else if (v_geo.type == VAR_TYPE_GEOMETRY)
		{
			if (gpu)
			{
				var geo = v_geo.value
				geo.uv_gpu = true
				geo.uv_props0.set(scale.x, scale.y, offset.x, offset.y)
				geo.uv_props1.set(axes, uw_factor, 1.0, 1.0)				
			}
			else
			{
				var mesh = v_geo.value.mesh

				var axes_x = BASE_AXES[axes * 2]
				var axes_y = BASE_AXES[axes * 2 + 1]
				mesh.uv_mapping = TextureMapping.init(axes_x, axes_y, scale, offset, uw_factor)

				mesh.rebuild()
			}
		}
	}
}